/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/***/

// By explicitly using `prop-types` you are opting into new development behavior.

// http://fb.me/prop-types-in-prod

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// don't hoist over string (html) components

// Avoid failures from read-only properties

// module.parent = undefined by default

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

/* WEBPACK VAR INJECTION */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

// NOTE: 1 DOM access here

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Firefox want us to check `-x` and `-y` variations as well

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

// Skip hidden elements which don't have an offsetParent

// .offsetParent will return the closest TH, TD or TABLE in case

// no offsetParent is present, I hate this job...

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// Here we make sure to give as "start" the element that comes first in the DOM

// Both nodes are inside #document

// one of the nodes is inside shadowDOM, find which one

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

// IE10 10 FIX: Please, don't ask, the element isn't

// considered in DOM in some circumstances...

// This isn't reproducible in IE10 compatibility mode of IE11

// subtract scrollbar size from sizes

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// we make this check conditional for performance reasons

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// Subtract margins of documentElement in case it's being used as parent

// we do this only on HTML because it's the only element that behaves

// differently when margins are applied to it. The margins are included in

// the box of the documentElement, in the other cases not.

// Attach marginTop and marginLeft because in some circumstances we may need them

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

// Handle viewport case

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

// Handle other cases based on DOM element used as boundaries

// In case of HTML, we need a different computation

// for all the other DOM elements, this one is good

// Add paddings

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

// Get popper node sizes

// Add position, width and height to our offsets object

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

// use native find if supported

// use `filter` to obtain the same behavior of `find`

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

// use native findIndex if supported

// use `find` + `indexOf` if `findIndex` isn't supported

// eslint-disable-line dot-notation

// Add properties to offsets to make them a complete clientRect object

// we do this before each modifier to make sure the previous one doesn't

// mess with these values

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Resize event listener on window

// Scroll event listener on scroll parents

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Reset state

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

// add unit if the value is numeric and is one of the following

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

// Get rid of `auto` `auto-start` and `auto-end`

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

// Use height if placement is left or right and index is 0 otherwise use width

// in this way the first offset will use an axis and the second one

// will use the other one

// If divider is found, we divide the list of values and operands to divide

// them by ofset X and Y.

// Convert the values with units to absolute pixels to allow our computations

// Loop trough the offsets arrays and execute the operations

// Most of the units rely on the orientation of the popper

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

// separate value from unit

// If it's not a number it's an operator, I guess

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {ModifierFn} */

// if shift shiftvariation is specified, run the modifier

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=300 - Index used to define the order of execution */

// If offsetParent is the reference element, we really want to

// go one step up and use the next offsetParent as reference to

// avoid to make this modifier completely useless and look like broken

// NOTE: DOM access here

// resets the popper's position so that the document size can be calculated excluding

// the size of the popper element itself

// restores the original style properties after the offsets have been computed

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=400 - Index used to define the order of execution */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=500 - Index used to define the order of execution */

// arrow depends on keepTogether in order to work

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is not found, don't run the modifier

// if the arrowElement isn't a query selector we must check that the

// provided DOM node is child of its popper node

//

// extends keepTogether behavior making sure the popper and its

// reference have enough pixels in conjunction

// top/left side

// bottom/right side

// compute center of the popper

// Compute the sideValue using the updated popper offsets

// take popper margin in account because we don't have this info available

// prevent arrowElement from being placed not contiguously to its popper

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=600 - Index used to define the order of execution */

// if `inner` modifier is enabled, we can't use the `flip` modifier

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// this boolean to detect any flip loop

// this object contains `position`, we want to preserve it along with

// any additional property we may add in the future

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=800 - Index used to define the order of execution */

// Avoid unnecessary DOM access if visibility hasn't changed

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=850 - Index used to define the order of execution */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// and not the bottom of the html element

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// Attributes

// Update `data` attributes, styles and arrowStyles

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=900 - Index used to define the order of execution */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

// any property present in `data.styles` will be applied to the popper,

// in this way we can make the 3rd party modifiers add custom styles to it

// Be aware, modifiers could override the properties defined in the previous

// lines of this modifier!

// any property present in `data.attributes` will be applied to the popper,

// they will be set as HTML attributes of the element

// if arrowElement is defined and arrowStyles has some properties

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/** @prop {Function} */

// compute reference element offsets

// compute auto placement, store placement inside the data object,

// modifiers will be able to edit `placement` if needed

// and refer to originalPlacement to know the original value

// Apply `position` to popper before anything else because

// without the position applied we can't guarantee correct computations

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

// We can't use class properties because they don't get listed in the

// class prototype and break stuff like Sinon stubs

// if popper is destroyed, don't perform any further update

// store the computed placement inside `originalPlacement`

// compute the popper offsets

// run the modifiers

// the first `update` will call `onCreate` callback

// the other ones will call `onUpdate` callback

// touch DOM only if `applyStyle` modifier is enabled

// remove the popper if user explicity asked for the deletion on destroy

// do not use `remove` because IE11 doesn't support it

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

// make update() debounced, so that it only runs at most once-per-tick

// with {} we create a new object with the options inside it

// init state

// get reference and popper elements (allow jQuery wrappers)

// Deep merge modifiers options

// Refactoring modifiers' list (Object => Array)

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// such code is executed in the same order of its modifier

// they could add new properties to their options configuration

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// fire the first update to position the popper in the right place

// setup event listeners, they will take care of update the position in specific situations

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/* harmony default export */

/**
 * This function synchronizes your history state with the Redux store.
 * Location changes flow from history to the store. An enhanced history is
 * returned with a listen method that responds to store updates for location.
 *
 * When this history is provided to the router, this means the location data
 * will flow like this:
 * history.push -> store.dispatch -> enhancedHistory.listen -> router
 * This ensures that when the store state changes due to a replay or other
 * event, the router will be updated appropriately and can transition to the
 * correct router state.
 */

// Ensure that the reducer is mounted on the store and functioning properly.

// If the store is replayed, update the URL in the browser to match.

// Init initialLocation with potential location in store

// Update address bar to reflect store state

// Whenever location changes, dispatch an action to get it in the store

// ... unless we just caused that location change

// Remember where we are

// Are we being called for the first time?

// Remember as a fallback in case state is reset

// Tell the store to update by dispatching an action

// History 3.x doesn't call listen synchronously, so fire the initial location change ourselves

// The enhanced history uses store as source of truth

// The listeners are subscribed to the store instead of history

// Copy of last location.

// Keep track of whether we unsubscribed, as Redux store

// only applies changes in subscriptions on next dispatch

// Let user unsubscribe later

// History 2.x listeners expect a synchronous call. Make the first call to the

// listener after subscribing to the store, in case the listener causes a

// location change (e.g. when it redirects)

// It also provides a way to destroy internal listeners

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

/* harmony export (binding) */

/* harmony import */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/* eslint-disable no-console */

/* eslint-enable no-console */

// This error was thrown as a convenience so that if you enable

// "break on all exceptions" in your console,

// it would pause the execution at this line.

// eslint-disable-line no-empty

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

// This is used to make sure we don't warn about the same

// keys multiple times.

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

/*eslint no-param-reassign:0*/

// Allow for axios('example/url'[, config]) a la fetch API

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */

// For CommonJS and CommonJS-like environments where a proper `window`

// is present, execute the factory and get jQuery.

// For environments that do not have a `window` with a `document`

// (such as Node.js), expose a factory as module.exports.

// This accentuates the need for the creation of a real `window`.

// e.g. var jQuery = require("jquery")(window);

// See ticket #14549 for more info.

// Pass this if window is not defined yet

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// enough that all such attempts are guarded in a try block.

// Support: Chrome <=57, Firefox <=52

// In some browsers, typeof returns "function" for HTML <object> elements

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// We don't want to classify *any* DOM node as a function.

// Support: Firefox 64+, Edge 18+

// Some browsers don't support the "nonce" property on scripts.

// On the other hand, just using `getAttribute` is not enough as

// the `nonce` attribute is reset to an empty string whenever it

// becomes browsing-context connected.

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// The `node.getAttribute` check was added for the sake of

// `jQuery.globalEval` so that it can fake a nonce-containing node

// via an object.

// Support: Android <=2.3 only (functionish RegExp)

/* global Symbol */

// Defining this global in .eslintrc.json would create a danger of using the global

// unguarded in another place, it seems safer to define global only for this module

// Define a local copy of jQuery

// The jQuery object is actually just the init constructor 'enhanced'

// Need init if jQuery is called (just allow error to be thrown if not included)

// Support: Android <=4.0 only

// Make sure we trim BOM and NBSP

// Support: real iOS 8.2 only (not reproducible in simulator)

// `in` check used to prevent JIT error (gh-2145)

// hasOwn isn't used here due to false negatives

// regarding Nodelist length in IE

// The current version of jQuery being used

// The default length of a jQuery object is 0

// Get the Nth element in the matched element set OR

// Get the whole matched element set as a clean array

// Return all the elements in a clean array

// Return just the one element from the set

// Take an array of elements and push it onto the stack

// (returning the new matched element set)

// Build a new jQuery matched element set

// Add the old object onto the stack (as a reference)

// Return the newly-formed element set

// Execute a callback for every element in the matched set.

// For internal use only.

// Behaves like an Array's method, not like a jQuery method.

// Handle a deep copy situation

// Skip the boolean and the target

// Handle case when target is a string or something (possible in deep copy)

// Extend jQuery itself if only one argument is passed

// Only deal with non-null/undefined values

// Extend the base object

// Prevent Object.prototype pollution

// Prevent never-ending loop

// Recurse if we're merging plain objects or arrays

// Ensure proper type for the source value

// Never move original objects, clone them

// Return the modified object

// Unique for each copy of jQuery on the page

// Assume jQuery is ready without the ready module

// Detect obvious negatives

// Use toString instead of jQuery.type to catch host objects

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Evaluates a script in a global context

// results is for internal usage only

// Support: Android <=4.0 only, PhantomJS 1 only

// push.apply(_, arraylike) throws on ancient WebKit

// Go through the array, only saving the items

// that pass the validator function

// arg is for internal usage only

// Go through the array, translating each of the items to their new values

// Go through every key on the object,

// Flatten any nested arrays

// A global GUID counter for objects

// jQuery.support is not used in Core but other projects attach their

// properties to it so it needs to exist.

// Populate the class2type map

/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */

// NaN means non-codepoint

// Support: Firefox<24

// Workaround erroneous numeric interpretation of +"0x"

// BMP codepoint

// Supplemental Plane codepoint (surrogate pair)

// Used for iframes

// See setDocument()

// Removing the function wrapper causes a "Permission Denied"

// error in IE

// Local document vars

// Instance-specific data

// Instance methods

// Use a stripped-down indexOf as it's faster than native

// https://jsperf.com/thor-indexof-vs-for/5

// Regular expressions

// http://www.w3.org/TR/css3-selectors/#whitespace

// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Operator (capture 2)

// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// For use in libraries implementing .is()

// We use this for POS matching in `select`

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// CSS escapes

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// CSS string/identifier serialization

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// Other potentially-special ASCII characters get backslash-escaped

// Optimize for push.apply( _, NodeList )

// Support: Android<4.0

// Detect silently failing push.apply

// Leverage slice if possible

// Support: IE<9

// Otherwise append directly

// Can't trust NodeList.length

// nodeType defaults to 9, since context defaults to document

// Return early from calls with invalid selector or context

// Try to shortcut find operations (as opposed to filters) in HTML documents

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// (excepting DocumentFragment context, where the methods don't exist)

// ID selector

// Document context

// Element context

// Support: IE, Opera, Webkit

// TODO: identify versions

// getElementById can match elements by name instead of ID

// Type selector

// Class selector

// Take advantage of querySelectorAll

// Support: IE 8 only

// Exclude object elements

// qSA considers elements outside a scoping root when evaluating child or

// descendant combinators, which is not what we want.

// In such cases, we work around the behavior by prefixing every selector in the

// list with an ID selector referencing the scope context.

// Thanks to Andrew Dupont for this technique.

// Capture the context ID, setting it first if necessary

// Prefix every selector in the list

// Expand context for sibling selectors

// All others

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Only keep the most recent entries

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */

// Remove from its parent by default

// release memory in IE

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */

// Use IE sourceIndex if available on both nodes

// Check if b follows a

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Only certain elements can match :enabled or :disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// Check for inherited disabledness on relevant non-disabled elements:

// * listed form-associated elements in a disabled fieldset

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

// * option elements in a disabled optgroup

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

// All such elements have a "form" property.

// Option elements defer to a parent optgroup if present

// Where there is no isDisabled, check manually

/* jshint -W018 */

// Remaining elements are neither :enabled nor :disabled

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */

// Match elements found at the specified indexes

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */

// Expose support vars for convenience

// Add button/input type pseudos

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */

// Support: IE <=8

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// https://bugs.jquery.com/ticket/4833

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */

// Return early if doc is invalid or already selected

// Update global variables

// Support: IE 9-11, Edge

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Support: IE 11, Edge

/* Attributes
	---------------------------------------------------------------------- */

// Support: IE<8

// Verify that getAttribute really returns attributes and not properties

// (excepting IE8 booleans)

/* getElement(s)By*
	---------------------------------------------------------------------- */

// Check if getElementsByTagName("*") returns only elements

// Support: IE<10

// Check if getElementById returns elements by name

// The broken getElementById methods don't pick up programmatically-set names,

// so use a roundabout getElementsByName test

// ID filter and find

// Support: IE 6 - 7 only

// getElementById is not reliable as a find shortcut

// Verify the id attribute

// Fall back on getElementsByName

// Tag

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// Filter out possible comments

// Class

/* QSA/matchesSelector
	---------------------------------------------------------------------- */

// QSA and matchesSelector support

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// qSa(:focus) reports false when true (Chrome 21)

// We allow this because of a bug in IE8/9 that throws an error

// whenever `document.activeElement` is accessed on an iframe

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// See https://bugs.jquery.com/ticket/13378

// Build QSA regex

// Regex strategy adopted from Diego Perini

// Select is set to empty string on purpose

// This is to test IE's treatment of not explicitly

// setting a boolean content attribute,

// since its presence should be enough

// https://bugs.jquery.com/ticket/12359

// Support: IE8, Opera 11-12.16

// Nothing should be selected when empty strings follow ^= or $= or *=

// The test attribute must be unknown in Opera but "safe" for WinRT

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// Support: IE8

// Boolean attributes and "value" are not treated correctly

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Webkit/Opera - :checked should return selected option elements

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// IE8 throws error here and will not see later tests

// Support: Safari 8+, iOS 8+

// https://bugs.webkit.org/show_bug.cgi?id=136851

// In-page `selector#id sibling-combinator selector` fails

// Support: Windows 8 Native Apps

// The type and name attributes are restricted during .innerHTML assignment

// Enforce case-sensitivity of name attribute

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// Support: IE9-11+

// IE's :disabled selector does not pick up the children of disabled fieldsets

// Opera 10-11 does not throw on post-comma invalid pseudos

// Check to see if it's possible to do matchesSelector

// on a disconnected node (IE 9)

// This should fail with an exception

// Gecko does not error, returns false instead

/* Contains
	---------------------------------------------------------------------- */

// Element contains another

// Purposefully self-exclusive

// As in, an element does not contain itself

/* Sorting
	---------------------------------------------------------------------- */

// Document order sorting

// Flag for duplicate removal

// Sort on method existence if only one input has compareDocumentPosition

// Disconnected nodes

// Calculate position if both inputs belong to the same document

// Otherwise we know they are disconnected

// Choose the first element that is related to our preferred document

// Exit early if the nodes are identical

// Parentless nodes are either documents or disconnected

// If the nodes are siblings, we can do a quick check

// Otherwise we need full lists of their ancestors for comparison

// Walk down the tree looking for a discrepancy

// Do a sibling check if the nodes have a common ancestor

// Otherwise nodes in our document sort first

// Set document vars if needed

// IE 9's matchesSelector returns false on disconnected nodes

// As well, disconnected nodes are said to be in a document

// fragment in IE 9

// Don't get fooled by Object.prototype properties (jQuery #13807)

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */

// Unless we *know* we can detect duplicates, assume their presence

// Clear input after sorting to release objects

// See https://github.com/jquery/sizzle/pull/225

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */

// Use textContent for elements

// innerText usage removed for consistency of new lines (jQuery #11153)

// Traverse its children

// Do not include comment or processing instruction nodes

// If no nodeType, this is expected to be an array

// Do not traverse comment nodes

// Can be adjusted by the user

// Move the given value to match[3] whether quoted or unquoted

/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// remember that false/true cast respectively to 0/1

// Accept quoted arguments as-is

// Get excess from tokenize (recursively)

// advance to the next closing parenthesis

// excess is a negative index

// Shortcut for :nth-*(n)

// :(first|last|only)-(child|of-type)

// Reverse direction for :only-* (if we haven't yet done so)

// non-xml :nth-child(...) stores cache data on `parent`

// Seek `elem` from a previously-cached index

// ...in a gzip-friendly way

// Support: IE <9 only

// Defend against cloned attroperties (jQuery gh-1709)

// Fallback to seeking `elem` from the start

// When found, cache indexes on `parent` and break

// xml :nth-child(...)

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// Use previously-cached element index if available

// Use the same loop as above to seek `elem` from the start

// Cache the index of each encountered element

// Incorporate the offset, then check against cycle size

// pseudo-class names are case-insensitive

// http://www.w3.org/TR/selectors/#pseudo-classes

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Remember that setFilters inherits from pseudos

// The user may use createPseudo to indicate that

// arguments are needed to create the filter function

// just as Sizzle does

// But maintain support for old signatures

// Potentially complex pseudos

// Trim the selector passed to compile

// to avoid treating leading and trailing

// spaces as combinators

// Match elements unmatched by `matcher`

// Don't keep the element (issue #299)

// "Whether an element is represented by a :lang() selector

// is based solely on the element's language value

// being equal to the identifier C,

// or beginning with the identifier C immediately followed by "-".

// The matching of C against the element's language value is performed case-insensitively.

// The identifier C does not have to be a valid language name."

// http://www.w3.org/TR/selectors/#lang-pseudo

// lang value must be a valid identifier

// Miscellaneous

// Boolean properties

// In CSS3, :checked should return both checked and selected elements

// Accessing this property makes selected-by-default

// options in Safari work properly

// Contents

// http://www.w3.org/TR/selectors/#empty-pseudo

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

//   but not by others (comment: 8; processing instruction: 7; etc.)

// nodeType < 6 works because attributes (2) do not appear as children

// Element/input types

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// Position-in-collection

// Easy API for creating new setFilters

// Check against closest ancestor/preceding element

// Check against all ancestor/preceding elements

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// Assign to newCache so results back-propagate to previous elements

// A match means we're done; a fail means we have to keep checking

// Reuse newcache so results back-propagate to previous elements

// Get initial elements from seed or context

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// ...intermediate processing is necessary

// ...otherwise use results directly

// Find primary matches

// Apply postFilter

// Un-match failing elements by moving them back to matcherIn

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Restore matcherIn since elem is not yet a final match

// Move matched elements from seed to results to keep them synchronized

// Add elements to results, through postFinder if defined

// The foundational matcher ensures that elements are reachable from top-level context(s)

// Avoid hanging onto element (issue #299)

// Return special upon seeing a positional matcher

// Find the next relative operator (if any) for proper handling

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// Filters

// Comma and first run

// Don't consume trailing commas as valid

// Combinators

// Cast descendant combinators to space

// Return the length of the invalid excess

// if we're just parsing

// Otherwise, throw an error or return tokens

// Cache the tokens

/* Internal Use Only */

// Generate a function of recursive functions that can be used to check each element

// Cache the compiled function

// Save selector and tokenization

// We must always have either seed elements or outermost context

// Use integer dirruns iff this is the outermost matcher

// Add elements passing elementMatchers directly to results

// Support: IE<9, Safari

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Track unmatched elements for set filters

// They will have gone through all possible matchers

// Lengthen the array for every element, matched or not

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// makes the latter nonnegative.

// Apply set filters to unmatched elements

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// no element matchers and no seed.

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// numerically zero.

// Reintegrate element matches to eliminate the need for sorting

// Discard index placeholder values to get only actual matches

// Add matches to results

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Override manipulation of globals by nested matchers

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */

// Try to minimize operations if there is only one selector in the list and no seed

// (the latter of which guarantees us context)

// Reduce context if the leading compound selector is an ID

// Precompiled matchers will still verify ancestry, so step up a level

// Fetch a seed set for right-to-left matching

// If seed is empty or no tokens remain, we can return early

// Compile and execute a filtering function if one is not provided

// Provide `match` to avoid retokenization if we modified the selector above

// One-time assignments

// Sort stability

// Support: Chrome 14-35+

// Always assume duplicates if they aren't passed to the comparison function

// Initialize against the default document

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Detached nodes confoundingly follow *each other*

// Should return 1, but returns 4 (following)

// Prevent attribute/property "interpolation"

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Deprecated

// Implement the identical functionality for filter and not

// Single element

// Arraylike of elements (jQuery, arguments, Array)

// If this is a positional/relative selector, check membership in the returned set

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// Initialize a jQuery object

// A central reference to the root jQuery(document)

// A simple way to check for HTML strings

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Strict HTML recognition (#11290: must start with <)

// Shortcut simple #id case for speed

// Give the init function the jQuery prototype for later instantiation

// HANDLE: $(""), $(null), $(undefined), $(false)

// Method init() accepts an alternate rootjQuery

// so migrate can support jQuery.sub (gh-2101)

// Handle HTML strings

// Execute immediately if ready is not present

// Match html or make sure no context is specified for #id

// Assume that strings that start and end with <> are HTML and skip the regex check

// HANDLE: $(DOMElement)

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// Option to run scripts is true for back-compat

// Intentionally let the error be thrown if parseHTML is not present

// Properties of context are called as methods if possible

// HANDLE: $(#id)

// HANDLE: $(expr, $(...))

// Inject the element directly into the jQuery object

// Initialize central reference

// Methods guaranteed to produce a unique set when starting from a unique set

// Positional selectors never match, since there's no _selection_ context

// Always skip document fragments

// Don't pass non-elements to Sizzle

// Determine the position of an element within the set

// No argument, return index in parent

// Index in selector

// If it receives a jQuery object, the first element is used

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Treat the template element as a regular one in browsers that

// don't support it.

// Remove duplicates

// Reverse order for parents* and prev-derivatives

// Convert String-formatted options into Object-formatted ones

// Check for promise aspect first to privilege synchronous behavior

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// * false: [ value ].slice( 0 ) => resolve( value )

// * true: [ value ].slice( 1 ) => resolve()

// For Promises/A+, convert exceptions into rejections

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Deferred#then to conditionally suppress rejection.

// Support: Android 4.0 only

// Strict mode functions invoked without .call/.apply get global-object context

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */

// Convert options from String-formatted to Object-formatted if needed

// (we check in cache first)

// Fire callbacks

// Enforce single-firing

// Execute callbacks for all pending executions,

// respecting firingIndex overrides and runtime changes

// Run callback and check for early termination

// Jump to end and forget the data so .add doesn't re-fire

// Forget the data if we're done with it

// Clean up if we're done firing for good

// Keep an empty list if we have data for future add calls

// Flag to know if list is currently firing

// Last fire value for non-forgettable lists

// Flag to know if list was already fired

// Flag to prevent firing

// Actual callback list

// Queue of execution data for repeatable lists

// Index of currently firing callback (modified by add/remove as needed)

// Actual Callbacks object

// Add a callback or a collection of callbacks to the list

// If we have memory from a past run, we should fire after adding

// Inspect recursively

// Remove a callback from the list

// Handle firing indexes

// Check if a given callback is in the list.

// If no argument is given, return whether or not list has callbacks attached.

// Remove all callbacks from the list

// Disable .fire and .add

// Abort any current/pending executions

// Clear all callbacks and values

// Disable .fire

// Also disable .add unless we have memory (since it would have no effect)

// Abort any pending executions

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// To know if the callbacks have already been called at least once

// action, add listener, callbacks,

// ... .then handlers, argument index, [final state]

// Keep pipe for back-compat

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// Support: Promises/A+ section 2.3.3.3.3

// https://promisesaplus.com/#point-59

// Ignore double-resolution attempts

// Support: Promises/A+ section 2.3.1

// https://promisesaplus.com/#point-48

// Support: Promises/A+ sections 2.3.3.1, 3.5

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-75

// Retrieve `then` only once

// Support: Promises/A+ section 2.3.4

// https://promisesaplus.com/#point-64

// Only check objects and functions for thenability

// Handle a returned thenable

// Special processors (notify) just wait for resolution

// ...and disregard older resolution values

// Only substitute handlers pass on context

// and multiple values (non-spec behavior)

// Process the value(s)

// Default process is resolve

// Only normal processors (resolve) catch and reject exceptions

// Support: Promises/A+ section 2.3.3.3.4.1

// https://promisesaplus.com/#point-61

// Ignore post-resolution exceptions

// Support: Promises/A+ section 2.3.3.3.1

// https://promisesaplus.com/#point-57

// Re-resolve promises immediately to dodge false rejection from

// subsequent errors

// Call an optional hook to record the stack, in case of exception

// since it's otherwise lost when execution goes async

// progress_handlers.add( ... )

// fulfilled_handlers.add( ... )

// rejected_handlers.add( ... )

// Get a promise for this deferred

// If obj is provided, the promise aspect is added to the object

// Add list-specific methods

// All done!

// promise.progress = list.add

// promise.done = list.add

// promise.fail = list.add

// Handle state

// state = "resolved" (i.e., fulfilled)

// state = "rejected"

// rejected_callbacks.disable

// fulfilled_callbacks.disable

// rejected_handlers.disable

// fulfilled_handlers.disable

// progress_callbacks.lock

// progress_handlers.lock

// progress_handlers.fire

// fulfilled_handlers.fire

// rejected_handlers.fire

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.resolveWith = list.fireWith

// deferred.rejectWith = list.fireWith

// Make the deferred a promise

// Call given func if any

// Deferred helper

// subordinate callback factory

// count of uncompleted subordinates

// count of unprocessed arguments

// subordinate fulfillment data

// the master Deferred

// Single- and empty arguments are adopted like Promise.resolve

// Multiple arguments are aggregated like Promise.all array elements

// These usually indicate a programmer mistake during development,

// warn about them ASAP rather than swallowing them by default.

// Support: IE 8 - 9 only

// Console exists when dev tools are open, which can happen at any time

// The deferred used on DOM ready

// The ready event handler and self cleanup method

// Catch cases where $(document).ready() is called

// after the browser event has already occurred.

// Support: IE <=9 - 10 only

// Older IE sometimes signals "interactive" too soon

// Is the DOM ready to be used? Set to true once it occurs.

// A counter to track how many items to wait for before

// the ready event fires. See #6781

// Handle when the DOM is ready

// Abort if there are pending holds or we're already ready

// Remember that the DOM is ready

// If there are functions bound, to execute

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Use the handy event callback

// A fallback to window.onload, that will always work

// Multifunctional method to get and set values of a collection

// The value/s can optionally be executed if it's a function

// Sets many values

// Sets one value

// Bulk operations run against the entire set

// Gets

// Matches dashed string for camelizing

// Used by camelCase as callback to replace()

// Convert dashed to camelCase; used by the css and data modules

// Support: IE <=9 - 11, Edge 12 - 15

// Microsoft forgot to hump their vendor prefix (#9572)

// Accepts only:

//  - Node

//    - Node.ELEMENT_NODE

//    - Node.DOCUMENT_NODE

//  - Object

//    - Any

// Check if the owner object already has a cache

// If not, create one

// We can accept data for non-element nodes in modern browsers,

// but we should not, see #8335.

// Always return an empty object.

// If it is a node unlikely to be stringify-ed or looped over

// use plain assignment

// Handle: [ owner, key, value ] args

// Always use camelCase key (gh-2257)

// Handle: [ owner, { properties } ] args

// Copy the properties one-by-one to the cache object

// In cases where either:

//   1. No key was specified

//   2. A string key was specified, but no value provided

// Take the "read" path and allow the get method to determine

// which value to return, respectively either:

//   1. The entire cache object

//   2. The data stored at the key

// When the key is not a string, or both a key and value

// are specified, set or extend (existing objects) with either:

//   1. An object of properties

//   2. A key and value

// Support array or space separated string of keys

// If key is an array of keys...

// We always set camelCase keys, so remove that.

// Remove the expando if there's no more data

// Support: Chrome <=35 - 45

// Webkit & Blink performance suffers when deleting properties

// from DOM nodes, so set to undefined instead

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// If nothing was found internally, try to fetch any

// data from the HTML5 data-* attribute

// Only convert to a number if it doesn't change the string

// Make sure we set the data so it isn't changed later

// TODO: Now that all calls to _data and _removeData have been replaced

// with direct calls to dataPriv methods, these can be deprecated.

// Gets all values

// Sets multiple values

// The calling jQuery object (element matches) is not empty

// (and therefore has an element appears at this[ 0 ]) and the

// `value` parameter was not undefined. An empty jQuery object

// will result in `undefined` for elem = this[ 0 ] which will

// throw an exception if an attempt to read a data cache is made.

// Attempt to get data from the cache

// The key will always be camelCased in Data

// Attempt to "discover" the data in

// HTML5 custom data-* attrs

// We tried really hard, but the data doesn't exist.

// Set the data...

// We always store the camelCased key

// Support: IE 11 only

// The attrs elements can be null (#14894)

// Speed up dequeue by getting out quickly if this is just a lookup

// If the fx queue is dequeued, always remove the progress sentinel

// Add a progress sentinel to prevent the fx queue from being

// automatically dequeued

// Clear up the last queue stop function

// Not public - generate a queueHooks object, or return the current one

// Ensure a hooks for this queue

// Get a promise resolved when queues of a certain type

// are emptied (fx is the type by default)

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Support: iOS 10.0-10.2 only

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// leading to errors. We need to check for `getRootNode`.

// Remember the old values, and insert the new ones

// Revert the old values

// Inline style trumps all

// isHiddenWithinTree might be called from jQuery#filter function;

// in that case, element will be second argument

// Otherwise, check computed style

// Support: Firefox <=43 - 45

// Disconnected elements can have computed display: none, so first confirm that elem is

// in the document.

// Starting value computation is required for potential unit mismatches

// Support: Firefox <=54

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Trust units reported by jQuery.css

// Iteratively approximate from a nonzero starting point

// Evaluate and update our best guess (doubling guesses that zero out).

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Make sure we update the tween properties later on

// Apply relative offset (+=/-=) if specified

// Determine new display value for elements that need to change

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// check is required in this first loop unless we have a nonempty display value (either

// inline or about-to-be-restored)

// Remember what we're overwriting

// Set the display of the elements in a second loop to avoid constant reflow

// Support: IE <=9 only

// XHTML parsers do not magically insert elements in the

// same way that tag soup parsers do. So we cannot shorten

// this by omitting <tbody> or other required elements.

// Support: IE <=9 - 11 only

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Mark scripts as having already been evaluated

// Add nodes directly

// Convert non-html into a text node

// Deserialize a standard representation

// Descend through wrappers to the right content

// Ensure the created nodes are orphaned (#12392)

// Remember the top-level container

// Convert html into DOM nodes

// Remove wrapper from fragment

// Skip elements already in the context collection (trac-4087)

// Capture executables

// Append to fragment

// Preserve script evaluation history

// Support: Android 4.0 - 4.3 only

// Check state lost if the name is set (#11217)

// Support: Windows Web Apps (WWA)

// `name` and `type` must use .setAttribute for WWA (#14901)

// Support: Android <=4.1 only

// Older WebKit doesn't clone checked state correctly in fragments

// Support: IE <=11 only

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Support: IE <=9 - 11+

// focus() and blur() are asynchronous, except when they are no-op.

// So expect focus to be synchronous when the element is already active,

// and blur to be synchronous when the element is not already active.

// (focus and blur are always synchronous in other supported browsers,

// this just defines when we can count on it).

// Accessing document.activeElement can throw unexpectedly

// https://bugs.jquery.com/ticket/13393

// Types can be a map of types/handlers

// ( types-Object, selector, data )

// ( types-Object, data )

// ( types, fn )

// ( types, selector, fn )

// ( types, data, fn )

// Use same guid so caller can remove using origFn

// Can use an empty set, since event contains the info

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */

// Ensure the presence of an event listener that handles manually-triggered

// synthetic events by interrupting progress until reinvoked in response to

// *native* events that it fires directly, ensuring that state changes have

// already occurred before other listeners are invoked.

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Register the controller as a special universal handler for all event namespaces

// Interrupt processing of the outer synthetic .trigger()ed event

// Saved data should be false in such cases, but might be a leftover capture object

// from an async native handler (gh-4350)

// If this is a native event triggered above, everything is now in order

// Fire an inner synthetic event with the original arguments

// Store arguments for use when handling the inner native event

// There will always be at least one argument (an event object), so this array

// will not be confused with a leftover capture object.

// Trigger the native event and capture its result

// focus() and blur() are asynchronous

// Cancel the outer synthetic event

// If this is an inner synthetic event for an event with a bubbling surrogate

// (focus or blur), assume that the surrogate already propagated from triggering the

// native event and prevent that from happening again here.

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// less bad than duplication.

// ...and capture the result

// Extend with the prototype to reset the above stopImmediatePropagation()

// Abort handling of the native event

// Don't attach events to noData or text/comment nodes (but allow plain objects)

// Caller can pass in an object of custom data in lieu of the handler

// Ensure that invalid selectors throw exceptions at attach time

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Make sure that the handler has a unique ID, used to find/remove it later

// Init the element's event structure and main handler, if this is the first

// Discard the second event of a jQuery.event.trigger() and

// when an event is called after a page has unloaded

// Handle multiple events separated by a space

// There *must* be a type, no attaching namespace-only handlers

// If event changes its type, use the special event handlers for the changed type

// If selector defined, determine special event api type, otherwise given type

// Update special based on newly reset type

// handleObj is passed to all event handlers

// Init the event handler queue if we're the first

// Only use addEventListener if the special events handler returns false

// Add to the element's handler list, delegates in front

// Keep track of which events have ever been used, for event optimization

// Detach an event or set of events from an element

// Once for each type.namespace in types; type may be omitted

// Unbind all events (on this namespace, if provided) for the element

// Remove matching events

// Remove generic event handler if we removed something and no more handlers exist

// (avoids potential for endless recursion during removal of special event handlers)

// Remove data and the expando if it's no longer used

// Make a writable jQuery.Event from the native event object

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Determine handlers

// Run delegates first; they may want to stop propagation beneath us

// If the event is namespaced, then each handler is only invoked if it is

// specially universal or its namespaces are a superset of the event's.

// Call the postDispatch hook for the mapped type

// Find delegate handlers

// Support: IE <=9

// Black-hole SVG <use> instance trees (trac-13180)

// Support: Firefox <=42

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// Don't check non-elements (#13208)

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't conflict with Object.prototype properties (#13203)

// Add the remaining (directly-bound) handlers

// Prevent triggered image.load events from bubbling to window.load

// Utilize native event to ensure correct state for checkable inputs

// For mutual compressibility with _default, replace `this` access with a local var.

// `|| data` is dead code meant only to preserve the variable through minification.

// Claim the first handler

// Return false to allow normal processing in the caller

// dataPriv.set( el, "click", ... )

// Force setup before triggering a click

// Return non-false to allow normal event-path propagation

// For cross-browser consistency, suppress native .click() on links

// Also prevent it if we're currently inside a leveraged native-event stack

// Support: Firefox 20+

// Firefox doesn't alert if the returnValue field is not set.

// This "if" is needed for plain objects

// Allow instantiation without the 'new' keyword

// Event object

// Events bubbling up the document may have been marked as prevented

// by a handler lower down the tree; reflect the correct value.

// Support: Android <=2.3 only

// Create target properties

// Support: Safari <=6 - 7 only

// Target should not be a text node (#504, #13143)

// Put explicitly provided properties onto the event object

// Create a timestamp if incoming event doesn't have one

// Mark it as fixed

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// Includes all common event props including KeyEvent and MouseEvent specific props

// Add which for key events

// Add which for click: 1 === left; 2 === middle; 3 === right

// Utilize native event if possible so blur/focus sequence is correct

// dataPriv.set( this, "focus", ... )

// dataPriv.set( this, "blur", ... )

// Force setup before trigger

// Create mouseenter/leave events using mouseover/out and event-time checks

// so that event delegation works in jQuery.

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Support: Safari 7 only

// Safari sends mouseenter too often; see:

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// for the description of the bug (it existed in older Chrome versions as well).

// For mouseenter/leave call the handler if related is outside the target.

// NB: No relatedTarget if the mouse left/entered the browser window

// ( event )  dispatched jQuery.Event

// ( types [, fn] )

// ( types-object [, selector] )

/* eslint-disable max-len */

// See https://github.com/eslint/eslint/issues/3229

/* eslint-enable */

// Support: IE <=10 - 11, Edge 12 - 13 only

// In IE/Edge using regex groups here causes severe slowdowns.

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// checked="checked" or checked

// Prefer a tbody over its parent table for containing new rows

// Replace/restore the type attribute of script elements for safe DOM manipulation

// 1. Copy private data: events, handlers, etc.

// 2. Copy user data

// Fix IE bugs, see support tests

// We can't cloneNode fragments that contain checked, in WebKit

// Use the original fragment for the last item

// instead of the first because it can end up

// being emptied incorrectly in certain situations (#8070).

// Keep references to cloned scripts for later restoration

// Evaluate executable scripts on first document insertion

// Reenable scripts

// Optional AJAX dependency, but won't run scripts if not present

// Fix IE cloning issues

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// Fails to persist the checked state of a cloned checkbox or radio button.

// Copy the events from the original to the clone

// Return the cloned set

// Support: Chrome <=35 - 45+

// Assign undefined instead of using delete, see Data#remove

// Prevent memory leaks

// Remove any remaining nodes

// See if we can take a shortcut and just use innerHTML

// Remove element nodes and prevent memory leaks

// Make the changes, replacing each non-ignored context element with the new content

// Force callback invocation

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// IE throws on elements created in popups

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// so they're executed at the same time to save the second computation.

// This is a singleton, we need to execute it only once

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Some styles come back with percentage values, even though they shouldn't

// Support: IE 9 - 11 only

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Support: IE 9 only

// Detect overflow:scroll screwiness (gh-3699)

// Support: Chrome <=64

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Nullify the div so it wouldn't be stored in the memory and

// it will also be a sign that checks already performed

// Support: Firefox 51+

// Retrieving style before computed somehow

// fixes an issue with getting wrong values

// on detached elements

// getPropertyValue is needed for:

//   .css('filter') (IE 9 only, #12537)

//   .css('--customProperty) (#3144)

// A tribute to the "awesome hack by Dean Edwards"

// Android Browser returns percentage for some values,

// but width seems to be reliably pixels.

// This is against the CSSOM draft spec:

// https://drafts.csswg.org/cssom/#resolved-values

// Remember the original values

// Put in the new values to get a computed value out

// Revert the changed values

// IE returns zIndex value as an integer.

// Define the hook, we'll check on the first run if it's really needed.

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// to missing dependency), remove it.

// Finish early in limited (non-browser) environments

// Style of cloned element affects source element cloned (#8908)

// Return a vendor-prefixed property or undefined

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Check for vendor prefixed names

// Swappable if display is none or starts with table

// except "table", "table-cell", or "table-caption"

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// Any relative (+/-) values have already been

// normalized at this point

// Guard against undefined "subtract", e.g., when used as in cssHooks

// Adjustment may not be necessary

// Both box models exclude margin

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// For "content", subtract padding

// For "content" or "padding", subtract border

// Add padding

// For "border" or "margin", add border

// Account for positive content-box scroll gutter when requested by providing computedVal

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// Assuming integer scroll gutter, subtract the rest and round down

// Start with computed style

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Fall back to offsetWidth/offsetHeight when value is "auto"

// This happens for inline elements with no explicit setting (gh-3571)

// Support: Android <=4.1 - 4.3 only

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Support: IE 9-11 only

// Also use offsetWidth/offsetHeight for when box sizing is unreliable

// We use getClientRects() to check for hidden/disconnected.

// In those cases, the computed value can be trusted to be border-box

// Adjust for the element's box model

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// retrieved value as a content box dimension.

// Normalize "" and auto

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Add in style property hooks for overriding the default

// behavior of getting and setting a style property

// We should always get a number back from opacity

// Don't automatically add "px" to these possibly-unitless properties

// Add in properties whose names you wish to fix before

// setting or getting the value

// Get and set the style property on a DOM Node

// Don't set styles on text and comment nodes

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// want to query the value if it is a CSS custom property

// since they are user-defined.

// Check if we're setting a value

// Gets hook for the prefixed version, then unprefixed version

// If a hook was provided get the non-computed value from there

// Otherwise just get the value from the style object

// Convert "+=" or "-=" to relative numbers (#7345)

// Fixes bug #9237

// Make sure that null and NaN values aren't set (#7116)

// If a number was passed in, add the unit (except for certain CSS properties)

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// "px" to a few hardcoded values.

// background-* props affect original clone's values

// If a hook was provided, use that value, otherwise just set the specified value

// want to modify the value if it is a CSS custom property

// Make numeric if forced or a qualifier was provided and val looks numeric

// If a hook was provided get the computed value from there

// Try prefixed name followed by the unprefixed name

// Otherwise, if a way to get the computed value exists, use that

// Convert "normal" to computed value

// Certain elements can have dimension info if we invisibly show them

// but it must have a current display style that would benefit

// Support: Safari 8+

// Table columns in Safari have non-zero offsetWidth & zero

// getBoundingClientRect().width unless display is changed.

// Running getBoundingClientRect on a disconnected node

// in IE throws an error.

// Only read styles.position if the test has a chance to fail

// to avoid forcing a reflow.

// Account for unreliable border-box dimensions by comparing offset* to computed and

// faking a content-box to get border and padding (gh-3699)

// Convert to pixels if value adjustment is needed

// These hooks are used by animate to expand properties

// Assumes a single number if not a string

// Panic based approach to setting things on disconnected nodes

// Use a property on the element directly when it is not a DOM element,

// or when there is no matching style property that exists.

// Passing an empty string as a 3rd parameter to .css will automatically

// attempt a parseFloat and fallback to a string if the parse fails.

// Simple values such as "10px" are parsed to Float;

// complex values such as "rotate(1rad)" are returned as-is.

// Use step hook for back compat.

// Use cssHook if its there.

// Use .style if available and use plain properties where available.

// Back compat <1.8 extension point

// Animations created synchronously will run synchronously

// Generate parameters to create a standard animation

// If we include width, step value is 1 to do all cssExpand values,

// otherwise step value is 2 to skip over Left and Right

// We're done with this property

// Don't match elem in the :animated selector

// If there's more to do, yield

// If this was an empty animation, synthesize a final progress notification

// Resolve the animation and report its conclusion

// If we are going to the end, we want to run all the tweens

// otherwise we skip this part

// Resolve when we played the last frame; otherwise, reject

// camelCase, specialEasing and expand cssHook pass

// Not quite $.extend, this won't overwrite existing keys.

// Reusing 'index' because we have the correct "name"

// Attach callbacks from options

// Queue-skipping animations hijack the fx hooks

// Detect show/hide animations

// Ensure the complete handler is called before this completes

// Pretend to be hidden if this is a "show" and

// there is still data from a stopped show/hide

// Bail out if this is a no-op like .hide().hide()

// Restrict "overflow" and "display" styles during box animations

// Record all 3 overflow attributes because IE does not infer the shorthand

// from identically-valued overflowX and overflowY and Edge just mirrors

// the overflowX value there.

// Identify a display type, preferring old show/hide data over the CSS cascade

// Get nonempty value(s) by temporarily forcing visibility

// Animate inline elements as inline-block

// Restore the original display value at the end of pure show/hide animations

// Implement show/hide animations

// General show/hide setup for this element animation

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Show elements before animating them

/* eslint-disable no-loop-func */

/* eslint-enable no-loop-func */

// The final step of a "hide" animation is actually hiding the element

// Per-property setup

// Go to the end state if fx are off

// Normalize opt.queue - true/undefined/null -> "fx"

// Queueing

// Show any hidden elements after setting opacity to 0

// Operate on a copy of prop so per-property easing won't be lost

// Empty animations, or finishing resolves immediately

// Start the next in the queue if the last step wasn't forced.

// Timers currently will call their complete callbacks, which

// will dequeue but only if they were gotoEnd.

// Enable finishing flag on private data

// Look for any active animations, and finish them

// Empty the queue first

// Look for any animations in the old queue and finish them

// Turn off finishing flag

// Generate shortcuts for custom animations

// Run the timer and safely remove it when done (allowing for external removal)

// Default speed

// Based off of the plugin by Clint Helfers, with permission.

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// Support: Android <=4.3 only

// Default value for a checkbox should be "on"

// Must access selectedIndex to make default options select

// An input loses its value after becoming a radio

// Don't get/set attributes on text, comment and attribute nodes

// Fallback to prop when attributes are not supported

// Attribute hooks are determined by the lowercase version

// Grab necessary hook if one is defined

// Attribute names can contain non-HTML whitespace characters

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// Hooks for boolean attributes

// Remove boolean attributes when set to false

// Avoid an infinite loop by temporarily removing this function from the getter

// Strip and collapse whitespace according to HTML spec

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// Don't get/set properties on text, comment and attribute nodes

// Fix name and attach hooks

// elem.tabIndex doesn't always return the

// correct value when it hasn't been explicitly set

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// Use proper attribute retrieval(#12072)

// Accessing the selectedIndex property

// forces the browser to respect setting selected

// on the option

// The getter ensures a default option is selected

// when in an optgroup

// eslint rule "no-unused-expressions" is disabled for this code

// since it considers such accessions noop

/* eslint no-unused-expressions: "off" */

// Only assign if different to avoid unneeded rendering.

// This expression is here for better compressibility (see addClass)

// Remove *all* instances

// Toggle individual class names

// Check each className given, space separated list

// Toggle whole class name

// Store className if set

// If the element has a class name or if we're passed `false`,

// then remove the whole classname (if there was one, the above saved it).

// Otherwise bring back whatever was previously saved (if anything),

// falling back to the empty string if nothing was stored.

// Treat null/undefined as ""; convert numbers to string

// If set returns undefined, fall back to normal setting

// Handle most common string cases

// Support: IE <=10 - 11 only

// option.text throws exceptions (#14686, #14858)

// Strip and collapse whitespace

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// Loop through all the selected options

// IE8-9 doesn't update selected after form reset (#2551)

// Don't return options that are disabled or in a disabled optgroup

// We don't need an array for one selects

// Get the specific value for the option

// Multi-Selects return an array

/* eslint-disable no-cond-assign */

/* eslint-enable no-cond-assign */

// Force browsers to behave consistently when non-matching value is set

// Radios and checkboxes getter/setter

// Return jQuery for attributes-only inclusion

// Don't do events on text and comment nodes

// Namespaced trigger; create a regexp to match event type in handle()

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Clean up the event in case it is being reused

// Clone any incoming data and prepend the event, creating the handler arg list

// Allow special events to draw outside the lines

// Determine event propagation path in advance, per W3C events spec (#9951)

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Fire handlers on the event path

// jQuery handler

// Native handler

// If nobody prevented the default action, do it now

// Call a native DOM method on the target with the same name as the event.

// Don't do default actions on window, that's where global variables be (#6170)

// Don't re-trigger an onFOO event when we call its FOO() method

// Prevent re-triggering of the same event, since we already bubbled it above

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// Piggyback on a donor event to simulate a different one

// Used only for `focus(in | out)` events

// Support: Firefox <=44

// Firefox doesn't have focus(in | out) events

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// focus(in | out) events fire after focus & blur events,

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Cross-browser xml parsing

// IE throws on parseFromString with invalid input.

// Serialize array item.

// Treat each array item as a scalar.

// Item is non-scalar (array or object), encode its numeric index.

// Serialize scalar item.

// Serialize object item.

// Serialize an array of form elements or a set of

// key/values into a query string

// If value is a function, invoke it and use its return value

// If an array was passed in, assume that it is an array of form elements.

// Serialize the form elements

// If traditional, encode the "old" way (the way 1.3.2 or older

// did it), otherwise encode params recursively.

// Return the resulting serialization

// Can add propHook for "elements" to filter or add form elements

// Use .is( ":disabled" ) so that fieldset[disabled] works

/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */

/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Anchor tag for parsing the document origin

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// dataTypeExpression is optional and defaults to "*"

// For each dataType in the dataTypeExpression

// Prepend if requested

// Base inspection function for prefilters and transports

// A special extend for ajax options

// that takes "flat" options (not to be deep extended)

// Fixes #9887

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */

// Counter for holding the number of active queries

// Last-Modified header cache for next request

/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

// Data converters

// Keys separate source (or catchall "*") and destination types with a single space

// Convert anything to text

// Text to html (true = no transformation)

// Evaluate text as a json expression

// Parse text as xml

// For options that shouldn't be deep extended:

// you can add your own custom options here if

// and when you create one that shouldn't be

// deep extended (see ajaxExtend)

// Creates a full fledged settings object into target

// with both ajaxSettings and settings fields.

// If target is omitted, writes into ajaxSettings.

// Building a settings object

// Extending ajaxSettings

// Main method

// If url is an object, simulate pre-1.5 signature

// Force options to be an object

// URL without anti-cache param

// Response headers

// timeout handle

// Url cleanup var

// Request state (becomes false upon send and true upon completion)

// To know if global events are to be dispatched

// Loop variable

// uncached part of the url

// Create the final options object

// Callbacks context

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Deferreds

// Status-dependent callbacks

// Headers (they are sent all at once)

// Default abort message

// Fake xhr

// Builds headers hashtable if needed

// Raw string

// Caches the header

// Overrides response content-type header

// Execute the appropriate callbacks

// Lazy-add the new callbacks in a way that preserves old ones

// Cancel the request

// Attach deferreds

// A cross-domain request is in order when the origin doesn't match the current origin.

// Add protocol if not provided (prefilters might expect it)

// Handle falsy url in the settings object (#10093: consistency with old signature)

// We also use the url parameter if available

// Alias method option to type as per ticket #12004

// Extract dataTypes list

// Support: IE <=8 - 11, Edge 12 - 15

// IE throws exception on accessing the href property if url is malformed,

// e.g. http://example.com:80x/

// Support: IE <=8 - 11 only

// Anchor's host property isn't correctly set when s.url is relative

// If there is an error parsing the URL, assume it is crossDomain,

// it can be rejected by the transport if it is invalid

// Convert data if not already a string

// If request was aborted inside a prefilter, stop there

// Apply prefilters

// We can fire global events as of now if asked to

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Check for headers option

// Watch for a new set of requests

// Uppercase the type

// Determine if request has content

// Save the URL in case we're toying with the If-Modified-Since

// and/or If-None-Match header later on

// Remove hash to simplify url manipulation

// More options handling for requests with no content

// Remember the hash so we can put it back

// If data is available and should be processed, append data to url

// #9682: remove data so that it's not used in an eventual retry

// Add or update anti-cache param if needed

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the correct header, if data is being sent

// Set the Accepts header for the server, depending on the dataType

// Allow custom headers/mimetypes and early abort

// Abort if not done already and return

// Aborting is no longer a cancellation

// If no transport, we auto-abort

// Install callbacks on deferreds

// Get transport

// If request was aborted inside ajaxSend, stop there

// Send global event

// Timeout

// Rethrow post-completion exceptions

// Propagate others as results

// Callback for when everything is done

// Ignore repeat invocations

// Clear timeout if it exists

// Dereference transport for early garbage collection

// (no matter how long the jqXHR object will be used)

// Cache response headers

// Set readyState

// Determine if successful

// Get response data

// Remove auto dataType and get content-type in the process

// Check if we're dealing with a known content-type

// Check to see if we have a response for the expected dataType

// Try convertible dataTypes

// Or just use first one

// If we found a dataType

// We add the dataType to the list if needed

// and return the corresponding response

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */

// Convert no matter what (that way responseXXX fields are always set)

// Work with a copy of dataTypes in case we need to modify it for conversion

// Create converters map with lowercased keys

// Convert to each sequential dataType

// Apply the dataFilter if provided

// There's only work to do if current dataType is non-auto

// Convert response if prev dataType is non-auto and differs from current

// If none found, seek a pair

// Seek a direct converter

// If conv2 outputs current

// If prev can be converted to accepted input

// Condense equivalence converters

// Apply converter (if not an equivalence)

// Unless errors are allowed to bubble, catch and return them

// If successful, handle type chaining

// if no content

// Extract error from statusText and normalize for non-aborts

// Set data for the fake xhr object

// Success/Error

// Complete

// Handle the global AJAX counter

// The url can be an options object (which then must have .url)

// Shift arguments if data argument was omitted

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Only evaluate the response if it is successful (gh-4126)

// dataFilter is not invoked for failure responses, so using it instead

// of the default converter is kludgy but it works.

// The elements to wrap the target around

// File protocol always yields status code 0, assume 200

// #1450: sometimes IE returns 1223 when it should be 204

// Cross domain only allowed if supported through XMLHttpRequest

// Apply custom fields if provided

// Override mime type if needed

// Set headers

// X-Requested-With header

// For cross-domain requests, seeing as conditions for a preflight are

// akin to a jigsaw puzzle, we simply never set it to be sure.

// (it can always be set on a per-request basis or even using ajaxSetup)

// For same-domain requests, won't change header if already provided.

// Callback

// On a manual native abort, IE9 throws

// errors on any property access that is not readyState

// File: protocol always yields status 0; see #8605, #14207

// IE9 has no XHR2 but throws on binary (trac-11426)

// For XHR2 non-text, let the caller handle it (gh-2498)

// Listen to events

// Use onreadystatechange to replace onabort

// to handle uncaught aborts

// Check readyState before timeout as it changes

// Allow onerror to be called first,

// but that will not handle a native abort

// Also, save errorCallback to a variable

// as xhr.onerror cannot be accessed

// Create the abort callback

// Do send the request (this may raise an exception)

// #14683: Only rethrow if this hasn't been notified as an error yet

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Install script dataType

// Handle cache's special case and crossDomain

// Bind script tag hack transport

// This transport only deals with cross domain or forced-by-attrs requests

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Default jsonp settings

// Detect, normalize options and install callbacks for jsonp requests

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Delegate to script

// Get callback name, remembering preexisting value associated with it

// Insert callback into url or form data

// Use data converter to retrieve json after script execution

// Force json dataType

// Install callback

// Clean-up function (fires after converters)

// If previous value didn't exist - remove it

// Save back as free

// Make sure that re-using the options doesn't screw things around

// Save the callback name for future use

// Call if it was a function and we have a response

// Support: Safari 8 only

// In Safari 8 documents created via document.implementation.createHTMLDocument

// collapse sibling forms: the second one becomes a child of the first one.

// Because of that, this security measure has to be disabled in Safari 8.

// https://bugs.webkit.org/show_bug.cgi?id=137337

// Argument "data" should be string of html

// context (optional): If specified, the fragment will be created in this context,

// defaults to document

// keepScripts (optional): If true, will include scripts passed in the html string

// Single tag

// Stop scripts or inline event handlers from being executed immediately

// by using document.implementation

// Set the base href for the created document

// so any parsed elements with URLs

// are based on the document's URL (gh-2965)

/**
 * Load a url into a page
 */

// If it's a function

// We assume that it's the callback

// If we have elements to modify, make the request

// If "type" variable is undefined, then "GET" method will be used.

// Make value of this field explicit since

// user can override it through ajaxSetup method

// Save response for use in complete callback

// If a selector was specified, locate the right elements in a dummy div

// Exclude scripts to avoid IE 'Permission Denied' errors

// Otherwise use the full result

// Attach a bunch of functions for handling common AJAX events

// Set position first, in-case top/left are set even on static elem

// Need to be able to calculate position if either

// top or left is auto and position is either absolute or fixed

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// offset() relates an element's border box to the document origin

// Preserve chaining for setter

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Running getBoundingClientRect on a

// disconnected node in IE throws an error

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// position() relates an element's margin box to its offset parent's padding box

// This corresponds to the behavior of CSS absolute positioning

// position:fixed elements are offset from the viewport, which itself always has zero offset

// Assume position:fixed implies availability of getBoundingClientRect

// Account for the *real* offset parent, which can be the document or its root element

// when a statically positioned element is identified

// Incorporate borders into its offset, since they are outside its content origin

// Subtract parent offsets and element margins

// This method will return documentElement in the following cases:

// 1) For the element inside the iframe without offsetParent, this method will return

//    documentElement of the parent window

// 2) For the hidden or detached element

// 3) For body or html element, i.e. in case of the html node - it will return itself

// but those exceptions were never presented as a real life use-cases

// and might be considered as more preferable results.

// This logic, however, is not guaranteed and can change at any point in the future

// Create scrollLeft and scrollTop methods

// Coalesce documents and windows

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Add the top/left cssHooks using jQuery.fn.position

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// getComputedStyle returns percent when specified for top/left/bottom/right;

// rather than make the css module depend on the offset module, just check for it here

// If curCSS returns percentage, fallback to offset

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Margin is only for outerHeight, outerWidth

// Get document width or height

// Get width or height on the element, requesting but not forcing parseFloat

// Set width or height on the element

// Handle event binding

// ( namespace ) or ( selector, types [, fn] )

// Bind a function to a context, optionally partially applying any

// arguments.

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// However, it is not slated for removal any time soon

// Quick check to determine if target is callable, in the spec

// this throws a TypeError, but we will just return undefined.

// Simulated bind

// Set the guid of unique handler to the same of original handler, so it can be removed

// As of jQuery 3.0, isNumeric is limited to

// strings and numbers (primitives or objects)

// that can be coerced to finite numbers (gh-2662)

// parseFloat NaNs numeric-cast false positives ("")

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// subtraction forces infinities to NaN

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Expose jQuery and $ identifiers, even in AMD

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// and CommonJS for browser emulators (#13566)

/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

// In some cases, StrictMode should also double-render lifecycles.

// This can be confusing for tests though,

// And it can be bad for performance in production.

// This feature flag can be used to control the behavior:

// To preserve the "Pause on caught exceptions" behavior of the debugger, we

// replay the begin phase of a failed component inside invokeGuardedCallback.

// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

// Gather advanced timing metrics for Profiler subtrees.

// Trace which interactions trigger each commit.

// Only used in www builds.

// TODO: true? Here it might just be false.

// React Fire: prevent the value and checked attributes from syncing

// with their related DOM properties

// These APIs will no longer be "unstable" in the upcoming 16.7 release,

// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

// Set of currently traced interactions.

// Interactions "stack"–

// Meaning that newly traced interactions are appended to the previously active set.

// When an interaction goes out of scope, the previous set (if any) is restored.

// Listener(s) to notify when interactions begin and end.

// If no async work was scheduled for this interaction,

// Notify subscribers that it's completed.

// Update the pending async work count for the current interactions.

// Update after calling subscribers in case of error.

// We only expect a wrapped function to be executed once,

// But in the event that it's executed more than once–

// Only decrement the outstanding interaction counts once.

// Update pending async counts for all wrapped interactions.

// If this was the last scheduled async work for any of them,

// Mark them as completed.

/**
 * This action type will be dispatched by the history actions below.
 * If you're writing a middleware to watch for navigation events, be sure to
 * look for actions of this type.
 */

/**
 * These actions correspond to the history API.
 * The associated routerMiddleware will capture these events before they get to
 * your reducer and reissue them as the matching function on your history.
 */

// Only Node.JS has a process variable that is of [[Class]] process

// For node use HTTP adapter

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

/**
 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
 * provided history object. This will prevent these actions from reaching your
 * reducer or any middleware that comes after this one.
 */

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// istanbul ignore next

/* istanbul ignore next  */

// For old IE

/* istanbul ignore if  */

// istanbul ignore if

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

/* eslint-disable no-var */

// TODO: Use symbols?

// Schedule the host callback using the earliest expiration in the list.

// Cancel the existing host callback.

// Remove the node from the list before calling the callback. That way the

// list is in a consistent state even if the callback throws.

// This is the last callback in the list.

// Now it's safe to call the callback.

// A callback may return a continuation. The continuation should be scheduled

// with the same priority and expiration as the just-finished callback.

// Insert the new callback into the list, sorted by its expiration. This is

// almost the same as the code in `scheduleCallback`, except the callback

// is inserted into the list *before* callbacks of equal expiration instead

// of after.

// This is the first callback in the list.

// This callback expires at or after the continuation. We will insert

// the continuation *before* this callback.

// No equal or lower priority callback was found, which means the new

// callback is the lowest priority callback in the list.

// The new callback is the highest priority callback in the list.

// Confirm we've exited the outer most event handler

// Keep flushing until there are no more immediate callbacks

// There's still work remaining. Request another callback.

// Exit right away if we're currently paused

// Flush all the expired callbacks without yielding.

// TODO Wrap in feature flag

// Read the current time. Flush all the callbacks that expire at or

// earlier than that time. Then read the current time again and repeat.

// This optimizes for as few performance.now calls as possible.

// Keep flushing callbacks until we run out of time in the frame.

// Before exiting, flush all the immediate work that was scheduled.

// schedule rAF and also a setTimeout

// cancel the setTimeout

// cancel the requestAnimationFrame

// The remaining code is essentially a polyfill for requestIdleCallback. It

// works by scheduling a requestAnimationFrame, storing the time for the start

// of the frame, then scheduling a postMessage which gets scheduled after paint.

// Within the postMessage handler do as much work as possible until time + frame

// rate. By separating the idle call into a separate event tick we ensure that

// layout, paint and other browser work is counted against the available time.

// The frame rate is dynamically adjusted.

// We capture a local reference to any global, in case it gets polyfilled after

// this module is initially evaluated. We want to be using a

// consistent implementation.

// This initialization code may run even on server environments if a component

// just imports ReactDOM (e.g. for findDOMNode). Some environments might not

// have setTimeout or clearTimeout. However, we always expect them to be defined

// on the client. https://github.com/facebook/react/pull/13088

// Dynamic injection, only for testing purposes.

// If Scheduler runs in a non-DOM environment, it falls back to a naive

// implementation using setTimeout.

// Check if MessageChannel is supported, too.

// If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,

// fallback to a naive implementation.

// Protect against re-entrancy.

// TODO: Remove fb.me link

// We use the postMessage trick to defer idle work until after the repaint.

// There's no time left in this idle period. Check if the callback has

// a timeout and whether it's been exceeded.

// No timeout.

// Schedule another animation callback so we retry later.

// Exit without invoking the callback.

// Exceeded the timeout. Invoke the callback even though there's no

// time left.

// Eagerly schedule the next animation callback at the beginning of the

// frame. If the scheduler queue is not empty at the end of the frame, it

// will continue flushing inside that callback. If the queue *is* empty,

// then it will exit immediately. Posting the callback at the start of the

// frame ensures it's fired within the earliest possible frame. If we

// waited until the end of the frame to post the callback, we risk the

// browser skipping a frame and not firing the callback until the frame

// after that.

// Defensive coding. We don't support higher frame rates than 120hz.

// If the calculated frame time gets lower than 8, it is probably a bug.

// If one frame goes long, then the next one can be short to catch up.

// If two frames are short in a row, then that's an indication that we

// actually have a higher frame rate than what we're currently optimizing.

// We adjust our heuristic dynamically accordingly. For example, if we're

// running on 120hz display or 90hz VR display.

// Take the max of the two in case one of them was an anomaly due to

// missed frame deadlines.

// No pending work. Exit.

// Don't wait for the next frame. Continue working ASAP, in a new event.

// If rAF didn't already schedule one, we need to schedule a frame.

// TODO: If this rAF doesn't materialize because the browser throttles, we

// might want to still have setTimeout trigger rIC as a backup to ensure

// that we keep performing work.

// Shift down to normal priority

// Anything lower than normal priority should remain at the current level.

// FIXME: Remove this branch once we lift expiration times out of React.

// Insert the new callback into the list, ordered first by expiration, then

// by insertion. So the new callback is inserted any other callback with

// equal expiration.

// The new callback expires before this one.

// No callback with a later expiration was found, which means the new

// callback has the latest expiration in the list.

// The new callback has the earliest expiration in the entire list.

// This is the only scheduled callback. Clear the list.

// Remove the callback from its position in the list.

// This is a fork of runWithPriority, inlined for performance.

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

/**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

// we don't care about invariant's own frame

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

/*!
  * Bootstrap v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.3.1): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */

/**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */

// eslint-disable-next-line no-bitwise

// Get transition-duration of the element

// Return 0 if element or transition duration is not found

// If multiple durations are defined, take the first

// TODO: Remove in v5

// Shoutout AngusCroll (https://goo.gl/pxwQGp)

// Can find the shadow root otherwise it'll return the document

// when we don't find a shadow root

// eslint-disable-line prefer-rest-params

/**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

/**
     * ------------------------------------------------------------------------
     * Class Definition
     * ------------------------------------------------------------------------
     */

/*#__PURE__*/

// Getters

// Public

// Private

// Static

/**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */

/**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

// Don't call next when the page isn't visible

// or the carousel or its parent isn't visible

// swipe left

// swipe right

// If it's a touch-enabled device, mouseenter/leave are fired as

// part of the mouse compatibility events on first tap - the carousel

// would stop cycling until user tapped out of it;

// here, we listen for touchend, explicitly pause the carousel

// (as if it's the second time we tap on it, mouseenter compat event

// is NOT fired) and after a timeout (to allow for mouse compatibility

// events to fire) we explicitly restart cycling

// ensure swiping with one touch and not pinching

// Coerce string values

// It's a jQuery object

// preventDefault only for <a> elements (which change the URL) not inside the collapsible element

// Disable totally Popper.js for Dropdown in Navbar

/**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */

// Check if it's jQuery element

// If boundary is not `scrollParent`, then set position to `static`

// to allow the menu to "escape" the scroll parent's boundaries

// https://github.com/twbs/bootstrap/issues/24251

// If this is a touch-enabled device we add extra

// empty mouseover listeners to the body's immediate children;

// only needed because of broken event delegation on iOS

// https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

// Handle dropup

// If this is a touch-enabled device we remove the extra

// empty mouseover listeners we added for iOS support

// eslint-disable-next-line complexity

// If not input/textarea:

//  - And not a key in REGEXP_KEYDOWN => not a dropdown command

// If input/textarea:

//  - If space key => not a dropdown command

//  - If key is other than escape

//    - If key is not up or down => not a dropdown command

//    - If trigger inside the menu => not a dropdown command

// Up

// Down

/**
       * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `Event.CLICK_DATA_API` event that should remain
       */

// Don't move modal's DOM position

// ----------------------------------------------------------------------

// the following methods are used to handle overflowing modals

// todo (fat): these should probably be refactored out of modal.js

// Note: DOMNode.style.paddingRight returns the actual value or '' if not set

//   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set

// Adjust fixed content padding

// Adjust sticky content margin

// Adjust body padding

// Restore fixed content padding

// Restore sticky content

// Restore body padding

// thx d.walsh

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.3.1): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

// Global attributes allowed on any supplied element below.

/**
     * A pattern that recognizes a commonly useful subset of URLs that are safe.
     *
     * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
     */

// Check if a regular expression validates the attribute.

/**
       * Check for Popper dependency
       * Popper - https://popper.js.org
       */

// private

// Protected

// Content is a DOM node or a jQuery

// Overrides

// We use append for html objects to maintain js events

// TODO (fat): remove sketch reliance on jQuery position/offset

// Set triggered link as active

// Set triggered links parents as active

// With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

// Handle special case when .nav-link is inside .nav-item

/**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.3.1): index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

//# sourceMappingURL=bootstrap.js.map

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Support baseURL config

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

/*!
  * Bootstrap util.js v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

//# sourceMappingURL=util.js.map

/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Relying on the `invariant()` implementation lets us

// preserve the format and params in the www builds.

// In DEV mode, we swap out invokeGuardedCallback for a special version

// that plays more nicely with the browser's DevTools. The idea is to preserve

// "Pause on exceptions" behavior. Because React wraps all user-provided

// functions in invokeGuardedCallback, and the production version of

// invokeGuardedCallback uses a try-catch, all user exceptions are treated

// like caught exceptions, and the DevTools won't pause unless the developer

// takes the extra step of enabling pause on caught exceptions. This is

// unintuitive, though, because even though React has caught the error, from

// the developer's perspective, the error is uncaught.

// To preserve the expected "Pause on exceptions" behavior, we don't use a

// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake

// DOM node, and call the user-provided callback from inside an event handler

// for that fake event. If the callback throws, the error is "captured" using

// a global event handler. But because the error happens in a different

// event loop context, it does not interrupt the normal program flow.

// Effectively, this gives us try-catch behavior without actually using

// try-catch. Neat!

// Check that the browser supports the APIs we need to implement our special

// DEV version of invokeGuardedCallback

// If document doesn't exist we know for sure we will crash in this method

// when we call document.createEvent(). However this can cause confusing

// errors: https://github.com/facebookincubator/create-react-app/issues/3482

// So we preemptively throw with a better message instead.

// Keeps track of whether the user-provided callback threw an error. We

// set this to true at the beginning, then set it to false right after

// calling the function. If the function errors, `didError` will never be

// set to false. This strategy works even if the browser is flaky and

// fails to call our global error handler, because it doesn't rely on

// the error event at all.

// Create a global error event handler. We use this to capture the value

// that was thrown. It's possible that this error handler will fire more

// than once; for example, if non-React code also calls `dispatchEvent`

// and a handler for that event throws. We should be resilient to most of

// those cases. Even if our error event handler fires more than once, the

// last error event is always used. If the callback actually does error,

// we know that the last error event is the correct one, because it's not

// possible for anything else to have happened in between our callback

// erroring and the code that follows the `dispatchEvent` call below. If

// the callback doesn't error, but the error event was fired, we know to

// ignore it because `didError` will be false, as described above.

// Use this to track whether the error event is ever called.

// Ignore.

// Create a fake event type.

// Attach our event handlers

// We immediately remove the callback from event listeners so that

// nested `invokeGuardedCallback` calls do not clash. Otherwise, a

// nested call would trigger the fake event handlers of any call higher

// in the stack.

// We check for window.hasOwnProperty('event') to prevent the

// window.event assignment in both IE <= 10 as they throw an error

// "Member not found" in strict mode, and in Firefox which does not

// support window.event.

// Synchronously dispatch our fake event. If the user-provided function

// errors, it will trigger our global error handler.

// The callback errored, but the error event never fired.

// Remove our event listeners

// Used by Fiber to simulate a try-catch.

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Injectable ordering of event plugins.
 */

/**
 * Injectable mapping from names to event plugin modules.
 */

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */

/**
 * Mapping from event name to dispatch config
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

// Check before the condition to catch violations early.

// We intentionally don't use spread (or .apply) directly because it

// breaks IE9: https://github.com/facebook/react/issues/13610

// --- Welcome to debugging React ---

// This error was thrown as a convenience so that you can use this stack

// to find the callsite that caused this warning to fire.

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

/**
 * Standard/simple iteration through an event's collected dispatches.
 */

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

// Both are not empty. Warning: Never call x.concat(y) when you are not

// certain that x is an Array (x could be a string with concat method).

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

// Listeners and Instances are two parallel arrays that are always in sync.

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */

/**
   * @param {array} InjectedEventPluginOrder
   * @public
   */

// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */

// Clone the ordering so it cannot be dynamically mutated.

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */

/**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

// TODO: shouldPreventMouseEvent is DOM-specific and definitely should not

// live here; needs to be moved to a better place soon

// Work in progress (ex: onload events in incremental mode).

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */

// Set `eventQueue` to null before processing it so that we can tell if more

// events get enqueued while processing.

// This would be a good time to rethrow if any of the event handlers threw.

// Not every plugin in the ordering may be loaded at runtime.

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */

// Top of the tree. This node must not be part of a React tree (or is

// unmounted, potentially).

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

// In Fiber this, is just the state node right now. We assume it will be

// a host component or host text.

// Without this first invariant, passing a non-DOM-component triggers the next

// invariant for a missing parent, which is super confusing.

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

// If A is deeper, crawl up.

// If B is deeper, crawl up.

// Walk in lockstep until we find a match.

/**
 * Return if A is an ancestor of B.
 */

/**
 * Return the parent instance of the passed-in instance.
 */

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */

// Do not uses the below two methods directly!

// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.

// (It is the only module that is allowed to access these methods.)

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

/**
 * A list of event names to a configurable list of vendor prefixes.
 */

/**
 * Event names that have already been detected and prefixed (if applicable).
 */

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

/**
 * Bootstrap if a DOM exists.
 */

// On some platforms, in particular some releases of Android 4.x,

// the un-prefixed "animation" and "transition" properties are defined on the

// style object but the events that fire will still be prefixed, so we need

// to check if the un-prefixed events are usable, and if not remove them from the map.

// Same as above

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

/* eslint valid-typeof: 0 */

// currentTarget is set when dispatching; no use in copying it here

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */

// these have a getter/setter for warnings

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

// The ChangeEventPlugin registers a "propertychange" event for

// IE. This event does not support bubbling or cancelling, and

// any references to cancelBubble throw "Member not found".  A

// typeof check of "unknown" circumvents this issue (and is also

// IE specific).

/**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */

/**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */

/**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */

/**
 * Helper to reduce boilerplate when creating subclasses.
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

// Webkit offers a very useful `textInput` event that can be used to

// directly represent `beforeInput`. The IE `textinput` event is not as

// useful, so we don't use it.

// In IE9+, we have access to composition events, but the data supplied

// by the native compositionend event may be incorrect. Japanese ideographic

// spaces, for instance (\u3000) are not recorded correctly.

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */

// Command keys insert or clear IME input.

// Expect IME keyCode on each keydown. If we get any other

// code we must have exited earlier.

// Events are not possible without cancelling IME.

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */

// Track the current IME composition status, if any.

/**
 * @return {?object} A SyntheticCompositionEvent.
 */

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */

// The current composition is stored statically and must not be

// overwritten while composition continues.

// Inject data generated from fallback path into the synthetic event.

// This matches the property of native CompositionEventInterface.

/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */

// If we are currently composing (IME) and using a fallback to do so,

// try to extract the composed characters from the fallback object.

// If composition event is available, we extract a string only at

// compositionevent, otherwise extract it at fallback events.

// If a paste event occurs after a keypress, throw out the input

// chars. Paste events should not lead to BeforeInput events.

/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

// ctrlKey && altKey is equivalent to AltGr, and is not a command.

// IE fires the `keypress` event when a user types an emoji via

// Touch keyboard of Windows.  In such a case, the `char` property

// holds an emoji character like `\uD83D\uDE0A`.  Because its length

// is 2, the property `which` does not represent an emoji correctly.

// In such a case, we directly return the `char` property instead of

// using `which`.

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */

// If no characters are being inserted, no BeforeInput event should

// be fired.

// Record the characters to be added to the DOM.

// If it's a spacebar character, assume that we have already handled

// it at the keypress level and bail immediately. Android Chrome

// doesn't give us keycodes, so we need to ignore it.

// For other native event types, do nothing.

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */

// Use to restore controlled state after a change event has fired.

// We perform this translation at the end of the event loop so that we

// always receive the correct fiber here

// Used as a way to call batchedUpdates when we don't have a reference to

// the renderer. Such as when we're dispatching events or if third party

// libraries need to call batchedUpdates. Eventually, this API will go away when

// everything is batched by default. We'll then have a similar API to opt-out of

// scheduled work and instead do synchronous work.

// Defaults

// If we are currently inside another batch, we need to wait until it

// fully completes before restoring state.

// Here we wait until all updates have propagated, which is important

// when using controlled components within layers:

// https://github.com/facebook/react/issues/1698

// Then we restore state of any controlled component.

// If a controlled event was fired, we may need to restore the state of

// the DOM node back to the controlled value. This is necessary when React

// bails out of the update without touching the DOM.

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

/**
 * HTML nodeType values that represent the type of the node
 */

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

// Fallback to nativeEvent.srcElement for IE9

// https://github.com/facebook/react/issues/12506

// Normalize SVG <use> element events #4963

// Safari may fire events on text nodes (Node.TEXT_NODE is 3).

// @see http://www.quirksmode.org/js/events_properties.html

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

// TODO: Once it's just Fiber we can move this to node._wrapperState

// if someone has already defined a value or Safari, then bail

// and don't track value will cause over reporting of changes,

// but it's better then a hard failure

// (needed for certain tests that spyOn input values and Safari)

// We could've passed this the first time

// but it triggers a bug in IE11 and Edge 14/15.

// Calling defineProperty() again should be equivalent.

// https://github.com/facebook/react/issues/11768

// if there is no tracker at this point it's unlikely

// that trying again will succeed

// Prevent newer renderers from RTE when used with older react package versions.

// Current owner and dispatcher used to share the same ref,

// but PR #14548 split them out to better support the react-debug-tools package.

// In DEV, include code for a common special case:

// prefer "folder/index.js" instead of just "index.js".

// Host root, text node or just invalid type.

// Safe because if current fiber exists, we are reconciling,

// and it is guaranteed to be the work-in-progress version.

// eslint-disable-next-line react-internal/warning-and-invariant-args

// $FlowIssue symbol is perfectly valid here

// eslint-disable-line

// When adding attributes to this list, be sure to also add them to

// the `possibleStandardNames` module to ensure casing and incorrect

// name warnings.

// These props are reserved by React. They shouldn't be written to the DOM.

// TODO: This prevents the assignment of defaultValue to regular

// elements (not just inputs). Now that ReactDOMInput assigns to the

// defaultValue property -- do we need this?

// mustUseProperty

// attributeName

// attributeNamespace

// A few React string attributes have a different name.

// This is a mapping from React prop names to the attribute names.

// These are "enumerated" HTML attributes that accept "true" and "false".

// In React, we let users pass `true` and `false` even though technically

// these aren't boolean attributes (they are coerced to strings).

// These are "enumerated" SVG attributes that accept "true" and "false".

// Since these are SVG attributes, their attribute names are case-sensitive.

// These are HTML boolean attributes.

// Note: there is a special case that prevents it from being written to the DOM

// on the client side because the browsers are inconsistent. Instead we call focus().

// Microdata

// These are the few React props that we set as DOM properties

// rather than attributes. These are all booleans.

// Note: `option.selected` is not updated if `select.multiple` is

// disabled with `removeAttribute`. We have special logic for handling this.

// These are HTML attributes that are "overloaded booleans": they behave like

// booleans, but can also accept a string value.

// These are HTML attributes that must be positive numbers.

// These are HTML attributes that must be numbers.

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */

// We had an attribute but shouldn't have had one, so read it

// for the error message.

// If this was a boolean, it doesn't matter what the value is

// the fact that we have it is the same as the expected.

// Even if this property uses a namespace we use getAttribute

// because we assume its namespaced name is the same as our config.

// To use getAttributeNS we need the local name which we don't have

// in our config atm.

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

// If the prop isn't in the special list, treat it as a simple attribute.

// Contrary to `setAttribute`, object properties are properly

// `toString`ed by IE8/9.

// The rest are treated as attributes with special cases.

// Flow does not allow string concatenation of most non-string types. To work

// around this limitation, we use an opaque type that can only be obtained by

// passing the value through getToStringValue first.

// function, symbol are assigned as empty strings

// This is a list of all SVG attributes that need special casing, namespacing,

// or boolean value assignment. Regular attributes that just accept strings

// and have the same names are omitted, just like in the HTML whitelist.

// Some of these attributes can be hard to find. This list was created by

// scrapping the MDN documentation.

// String SVG attributes with the xlink namespace.

// String SVG attributes with the xml namespace.

// These attribute exists both in HTML and SVG.

// The attribute name is case-sensitive in SVG so we can't just use

// the React name like we do for attributes that exist only in HTML.

/**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

// We explicitly want to coerce to number here if possible.

// eslint-disable-next-line

// Submit/reset inputs need the attribute removed completely to avoid

// blank-text buttons.

// When not syncing the value attribute, React only assigns a new value

// whenever the defaultValue React prop has changed. When not present,

// React does nothing

// When syncing the value attribute, the value comes from a cascade of

// properties:

//  1. The value React property

//  2. The defaultValue React property

//  3. Otherwise there should be no change

// When not syncing the checked attribute, the attribute is directly

// controllable from the defaultValue React property. It needs to be

// updated as new props come in.

// When syncing the checked attribute, it only changes when it needs

// to be removed, such as transitioning from a checkbox into a text input

// Do not assign value if it is already set. This prevents user text input

// from being lost during SSR hydration.

// Avoid setting value attribute on submit/reset inputs as it overrides the

// default value provided by the browser. See: #12872

// When not syncing the value attribute, the value property points

// directly to the React prop. Only assign it if it exists.

// Always assign on buttons so that it is possible to assign an

// empty string to clear button text.

// Otherwise, do not re-assign the value property if is empty. This

// potentially avoids a DOM write and prevents Firefox (~60.0.1) from

// prematurely marking required inputs as invalid. Equality is compared

// to the current value in case the browser provided value is not an

// empty string.

// When syncing the value attribute, the value property should use

// the wrapperState._initialValue property. This uses:

//   1. The value React property when present

//   2. The defaultValue React property when present

//   3. An empty string

// When not syncing the value attribute, assign the value attribute

// directly from the defaultValue React property (when present)

// Otherwise, the value attribute is synchronized to the property,

// so we assign defaultValue to the same thing as the value property

// assignment step above.

// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug

// this is needed to work around a chrome bug where setting defaultChecked

// will sometimes influence the value of checked (even after detachment).

// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416

// We need to temporarily unset name to avoid disrupting radio button groups.

// When not syncing the checked attribute, the checked property

// never gets assigned. It must be manually set. We don't want

// to do this when hydrating so that existing user input isn't

// modified

// Only assign the checked attribute if it is defined. This saves

// a DOM write when controlling the checked attribute isn't needed

// (text inputs, submit/reset)

// When syncing the checked attribute, both the checked property and

// attribute are assigned at the same time using defaultChecked. This uses:

//   1. The checked React property when present

//   2. The defaultChecked React property when present

//   3. Otherwise, false

// If `rootNode.form` was non-null, then we could try `form.elements`,

// but that sometimes behaves strangely in IE8. We could also try using

// `form.getElementsByName`, but that will only return direct children

// and won't include inputs that use the HTML5 `form=` attribute. Since

// the input might not even be in a form. It might not even be in the

// document. Let's just use the local `querySelectorAll` to ensure we don't

// miss anything.

// This will throw if radio buttons rendered by different copies of React

// and the same name are rendered into the same form (same as #1939).

// That's probably okay; we don't support it just as we don't support

// mixing React radio buttons with non-React ones.

// We need update the tracked value on the named cousin since the value

// was changed but the input saw no event or value set

// If this is a controlled radio button group, forcing the input that

// was previously checked to update will cause it to be come re-checked

// as appropriate.

// In Chrome, assigning defaultValue to certain input types triggers input validation.

// For number inputs, the display value loses trailing decimal points. For email inputs,

// Chrome raises "The specified value <x> is not a valid email address".

// Here we check to see if the defaultValue has actually changed, avoiding these problems

// when the user is inputting text

// https://github.com/facebook/react/issues/7253

// Focused number inputs synchronize on blur. See ChangeEventPlugin.js

// Flag this event loop as needing state restore.

/**
 * For IE shims
 */

/**
 * SECTION: handle `input` event
 */

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */

// If change and propertychange bubbled, we'd just bind to it like all the

// other events and have it go through ReactBrowserEventEmitter. Since it

// doesn't, we manually listen for the events and so we have to enqueue and

// process the abstract event manually.

// Batching is necessary here in order to ensure that all event handlers run

// before the next rerender (including event handlers attached to ancestor

// elements instead of directly on the input). Without this, controlled

// components don't work properly in conjunction with event bubbling because

// the component is rerendered and the value reverted before all the event

// handlers can run. See https://github.com/facebook/react/issues/708.

// In IE9, propertychange fires for most input events but is buggy and

// doesn't fire when text is deleted, but conveniently, selectionchange

// appears to fire in all of the remaining cases so we catch those and

// forward the event if the value has changed

// In either case, we don't want to call the event handler if the value

// is changed from JS so we redefine a setter for `.value` that updates

// our activeElementValue variable, allowing us to ignore those changes

// stopWatching() should be a noop here but we call it just in case we

// missed a blur event somehow.

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */

// For IE8 and IE9.

// On the selectionchange event, the target is just document which isn't

// helpful for us so just check activeElement instead.

// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire

// propertychange on the first input event after setting `value` from a

// script and fires only keydown, keypress, keyup. Catching keyup usually

// gets it and catching keydown lets us fire an event for the first

// keystroke if user does a key repeat (it'll be a little delayed: right

// before the second keystroke). Other input methods (e.g., paste) seem to

// fire selectionchange normally.

/**
 * SECTION: handle `click` event
 */

// IE9 claims to support the input event but fails to trigger it when

// deleting text, so we ignore its input events.

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */

/**
 * SECTION: handle `change` event
 */

// Use the `click` event to detect changes to checkbox and radio inputs.

// This approach works across all browsers, whereas `change` does not fire

// until `blur` in IE8.

// When blurring, set the value attribute for number inputs

// If controlled, assign the value attribute to the current value on blur

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support

// getModifierState. If getModifierState is not supported, we map it to a set of

// modifier keys exposed by the event. In this case, Lock-keys are not supported.

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

/**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */

// Must not be a mouse or pointer in or out - ignoring.

// `nativeEventTarget` is probably a window object.

// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.

// Moving to a node from outside the window.

// Nothing pertains to our managed components.

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

// Test for A's keys different from B.

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */

// Don't change these two values. They're used by React Dev Tools.

/*              */

/*         */

/*             */

/*                */

/*    */

/*          */

/*            */

/*                   */

/*               */

/*   */

/*        */

// If there is no alternate, this might be a new tree that isn't inserted

// yet. If it is, then it will have a pending insertion effect on it.

// If we didn't hit the root, that means that we're in an disconnected tree

// that has been unmounted.

// If there is no alternate, then we only need to check if it is mounted.

// If we have two possible branches, we'll walk backwards up to the root

// to see what path the root points to. On the way we may hit one of the

// special cases and we'll deal with them.

// We're at the root.

// If both copies of the parent fiber point to the same child, we can

// assume that the child is current. This happens when we bailout on low

// priority: the bailed out fiber's child reuses the current child.

// We've determined that A is the current branch.

// We've determined that B is the current branch.

// We should never have an alternate for any mounting node. So the only

// way this could possibly happen is if this was unmounted, if at all.

// The return pointer of A and the return pointer of B point to different

// fibers. We assume that return pointers never criss-cross, so A must

// belong to the child set of A.return, and B must belong to the child

// set of B.return.

// The return pointers point to the same fiber. We'll have to use the

// default, slow path: scan the child sets of each parent alternate to see

// which child belongs to which set.

// Search parent A's child set

// Search parent B's child set

// If the root is not a host container, we're in a disconnected tree. I.e.

// unmounted.

// Otherwise B has to be current branch.

// Next we'll drill down this component to find the first HostComponent/Text.

// Flow needs the return null here, but ESLint complains about it.

// eslint-disable-next-line no-unreachable

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.

// Must not discard the (non-)printable Enter-key.

// FF does not set `charCode` for the Enter-key, check against `keyCode`.

// IE8 does not implement `charCode`, but `keyCode` has the correct value.

// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)

// report Enter as charCode 10 when ctrl is pressed.

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

// Normalize inconsistent values reported by browsers due to

// implementations of a working draft specification.

// FireFox implements `key` but returns `MozPrintableKey` for all

// printable characters (normalized to `Unidentified`), ignore it.

// Browser does not implement `key`, polyfill as much of it as we can.

// The enter-key is technically both printable and non-printable and can

// thus be captured by `keypress`, no other non-printable key should.

// Legacy Interface

// `charCode` is the result of a KeyPress event and represents the value of

// the actual printable character.

// KeyPress is deprecated, but its replacement is not yet final and not

// implemented in any major browser. Only KeyPress has charCode.

// `keyCode` is the result of a KeyDown/Up event and represents the value of

// physical keyboard key.

// The actual meaning of the value depends on the users' keyboard layout

// which cannot be detected. Assuming that it is a US keyboard layout

// provides a surprisingly accurate mapping for US and European users.

// Due to this, it is left to the user to implement at this time.

// `which` is an alias for either `keyCode` or `charCode` depending on the

// type of the event.

// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).

// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).

// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).

// Browsers without "deltaMode" is reporting in raw wheel delta where one

// notch on the scroll is always +/- 120, roughly equivalent to pixels.

// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or

// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

// Only used in DEV for exhaustiveness validation.

// Firefox creates a keypress event for function keys too. This removes

// the unwanted keypress events. Enter is however both printable and

// non-printable. One would expect Tab to be as well (but it isn't).

/* falls through */

// Firefox creates a click event on right mouse clicks. This removes the

// unwanted click events.

// TODO: Disabled elements should not respond to mouse events

// HTML Events

// @see http://www.w3.org/TR/html5/index.html#events-0

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */

// TODO: It may be a good idea to cache this to prevent unnecessary DOM

// traversal, but caching is difficult to do correctly without using a

// mutation observer to listen for all DOM changes.

// Used to store ancestor hierarchy in top level callback

// Loop through the hierarchy, in case there's any nested components.

// It's important that we build the array of ancestors before calling any

// event handlers, because event handlers can modify the DOM, leading to

// inconsistencies with ReactMount's node cache. See #1105.

// TODO: can we stop exporting these?

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */

// Check if interactive and wrap in interactiveUpdates

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */

// If we get an event (ex: img onload) before committing that

// component's mount, ignore it for now (that is, treat it as if it was an

// event on a non-React tree). We might also consider queueing events and

// dispatching them after the mount.

// Event queue being processed in the same cycle allows

// `preventDefault`.

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`

// directly.

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

// up/down buttons on an <input type="number">. Anonymous divs do not seem to

// expose properties, triggering a "Permission denied error" if any of its

// properties are accessed. The only seemingly possible way to avoid erroring

// is to access a property that typically works for non-anonymous divs and

// catch any error that may otherwise arise. See

// https://bugzilla.mozilla.org/show_bug.cgi?id=208427

/* eslint-disable no-unused-expressions */

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

// Moving from `node` to its first child `next`.

// If `outerNode` has children, this is always the second time visiting

// it. If it has no children, this is still the first loop, and the only

// valid selection is anchorNode and focusNode both equal to this node

// and both offsets 0, in which case we will have handled above.

// Moving from `node` to its next sibling `next`.

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

// Accessing the contentDocument of a HTMLIframeElement can cause the browser

// to throw, e.g. if it has a cross-origin src attribute.

// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:

// iframe.contentDocument.defaultView;

// A safety way is to access one of the cross origin properties: Window or Location

// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.

// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

// Modern browser with input or textarea.

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

// Edge fails with "Object expected" in some scenarios.

// (For instance: TinyMCE editor used in a list component that supports pasting to add more,

// fails when pasting 100+ items)

// IE 11 uses modern selection, but doesn't support the extend method.

// Flip backward selections, so we can set with a single range.

// Focusing a node can change the scroll position, which is undesirable

/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */

// Ensure we have the right element, and that the user is not dragging a

// selection (this matches native `select` event behavior). In HTML5, select

// fires only on input and textarea thus if there's no focused element we

// won't dispatch.

// Only fire when selection has actually changed.

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */

// Track whether all listeners exists for this plugin. If none exist, we do

// not extract events. See #3639.

// Track the input node that has focus.

// Don't fire the event while the user is dragging. This matches the

// semantics of the native select event.

// Chrome and IE fire non-standard event when selection is changed (and

// sometimes when it hasn't). IE's event fires out of order with respect

// to key and input events on deletion, so we discard it.

// Firefox doesn't support selectionchange, so check selection status

// after each key entry. The selection changes after keydown and before

// keyup, but we check on keydown as well in the case of holding down a

// key, when multiple keydown events are fired but only one keyup is.

// This is also our approach for IE handling, for the reason above.

// falls through

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

/**
 * Some important event plugins included by default (without having to require
 * them).
 */

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

// This mirrors the codepath above, but runs for hydration too.

// Warn about invalid children here so that client and hydration are consistent.

// TODO: this seems like it could cause a DEV-only throw for hydration

// if children contains a non-element object. We should try to avoid that.

// TODO: Remove support for `selected` in <option>.

// Flatten children. We'll warn if they are invalid

// during validateProps() which runs for hydration too.

// Note that this would throw on non-element objects.

// Elements are stringified (which is normally irrelevant

// but matters for <fbt>).

// TODO: direct imports like some-package/src/* are bad. Fix me.

/**
 * Validation function for `value` and `defaultValue`.
 */

// Prefix to avoid chaos with special keys.

// Do not set `select.value` as exact behavior isn't consistent across all

// browsers for all cases.

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

// Only bother fetching default value if we're going to use it

// TODO (yungsters): Remove support for children content in <textarea>.

// Cast `value` to a string to ensure the value is set correctly. While

// browsers typically do this as necessary, jsdom doesn't.

// To avoid side effects (such as losing text selection), only set value if changed

// This is in postMount because we need access to the DOM node, which is not

// available until after the component has mounted.

// Only set node.value if textContent is equal to the expected

// initial value. In IE10/IE11 there is a bug where the placeholder attribute

// will populate textContent as well.

// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

// Assumes there is no parent namespace.

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

// IE does not have innerHTML for SVG nodes, so instead we inject the

// new markup in a temp node and then move the child nodes across into

// the target node

// SVG-related properties

// SVG temp container for IE lacking innerHTML

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an

// infinite loop, because it iterates over the newly added props too.

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

// As Andi Smith suggests

// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix

// is converted to lowercase `ms`.

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */

/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */

// For HTML, certain tags should omit their close tag. We keep a whitelist for

// those special-case tags.

// For HTML, certain tags cannot have children. This has the same purpose as

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

// Note the use of `==` which checks for null or undefined.

// These are reserved SVG and MathML elements.

// We don't mind this whitelist too much because we expect it to never grow.

// The alternative is to track the namespace in a few places which is convoluted.

// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts

// When adding attributes to the HTML or SVG whitelist, be sure to

// also add them to this module to ensure casing and incorrect name

// warnings.

// HTML

// SVG

// state

// Widget Attributes

// Live Region Attributes

// Drag-and-Drop Attributes

// Relationship Attributes

// If this is an aria-* attribute, but is not listed in the known DOM

// DOM properties, then it is an invalid aria-* attribute.

// aria-* attributes should be lowercase; suggest the lowercase version.

// We can't rely on the event system being injected on the server.

// If no event plugins have been injected, we are in a server environment.

// So we can't tell if the event name is correct for sure, but we can filter

// out known bad ones like `onclick`. We can't suggest a specific replacement though.

// Let the ARIA attribute hook validate ARIA attributes

// Known attributes should match the casing specified in the property config.

// Unknown attributes should have lowercase casing since that's how they

// will be cased anyway with server rendering.

// Now that we've validated casing, do not validate

// data types for reserved props

// Warn when a known attribute is a bad type

// Warn when passing the strings 'false' or 'true' into a boolean prop

// Chrome is the only major browser not shipping <time>. But as of July

// 2017 it intends to ship it due to widespread usage. We intentionally

// *don't* warn for <time> even if it's unrecognized by Chrome because

// it soon will be, and many apps have been using it anyway.

// There are working polyfills for <dialog>. Let people use it.

// Electron ships a custom <webview> tag to display external web content in

// an isolated frame and process.

// This tag is not present in non Electron environments such as JSDom which

// is often used for testing purposes.

// @see https://electronjs.org/docs/api/webview-tag

/* canUseEventSystem */

// IE 11 parses & normalizes the style attribute as opposed to other

// browsers. It adds spaces and sorts the properties in some

// non-alphabetical order. Handling that would require sorting CSS

// properties in the client & server versions or applying

// `expectedStyle` to a temporary DOM node to read its `style` attribute

// normalized. Since it only affects IE, we're skipping style warnings

// in that browser completely in favor of doing all that work.

// See https://github.com/facebook/react/issues/11807

// HTML parsing normalizes CR and CRLF to LF.

// It also can turn \u0000 into \uFFFD inside attributes.

// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream

// If we have a mismatch, it might be caused by that.

// We will still patch up in this case but not fire the warning.

// We set the flag for a single dependency later in this function,

// but this ensures we mark both as attached rather than just one.

// We listen to them on the target DOM elements.

// Some of them bubble so we don't want them to fire twice.

// Mobile Safari does not fire properly bubble click events on

// non-interactive elements, which means delegated click listeners do not

// fire. The workaround for this bug involves attaching an empty click

// listener on the target node.

// http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html

// Just set it using the onclick property so that we don't have to manage any

// bookkeeping for it. Not sure if we need to clear it when the listener is

// removed.

// TODO: Only do this for the relevant Safaris maybe?

// TODO: Make sure that we check isMounted before firing any of these events.

// Create listener for each media event

// For controlled components we always need to ensure we're listening

// to onChange. Even if there is no listener.

// Freeze the next style object so that we can assume it won't be

// mutated. We have already warned for this in the past.

// Relies on `updateStylesByID` not mutating `styleUpdates`.

// TODO: Make sure we check if this is still unmounted or do any clean

// up necessary since we never stop tracking anymore.

// value="" should make a value attribute (#6219)

// TODO: This cast may not be sound for SVG, MathML or custom elements.

// Calculate the diff between the two objects.

// This is a special case. If any listener updates we need to ensure

// that the "current" fiber pointer gets updated so we need a commit

// to update this element.

// For all other deleted properties we add it to the queue. We use

// the whitelist in the commit phase instead.

// Unset styles on `lastProp` but not on `nextProp`.

// Update styles that changed since `lastProp`.

// We eagerly listen to this even though we haven't committed yet.

// that the "current" props pointer gets updated so we need a commit

// For any other property we always add it to the queue and then we

// filter it out using the whitelist during the commit.

// Apply the diff.

// Update checked *before* name.

// In the middle of an update, it is possible to have multiple checked.

// When a checked radio tries to change name, browser makes another radio's checked false.

// TODO: Ensure that an update gets scheduled if any of the special props

// changed.

// TODO: Handle wasCustomComponentTag

// Update the wrapper around inputs *after* updating props. This has to

// happen after `updateDOMProperties`. Otherwise HTML5 input validations

// raise warnings and prevent the new value from being assigned.

// <select> value update needs to occur after <option> children

// reconciliation

// For simplicity, reapply `defaultValue` if `multiple` is toggled.

// Revert the select back to its default unselected state.

// Parse the HTML and read it back to normalize the HTML string so that it

// can be used for comparison.

// We could have created a separate document here to avoid

// re-initializing custom elements if they exist. But this breaks

// how <noscript> is being handled. So we use the same document.

// See the discussion in https://github.com/facebook/react/pull/11157.

// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point

// TODO: Distinguish by namespace here -- for <title>, including it here

// errs on the side of fewer warnings

// See rules for 'li', 'dd', 'dt' start tags in

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

/**
   * Returns whether
   */

// Renderers that don't support persistence

// can re-export everything from this module.

// Persistence (when unsupported)

// First, let's check if we're in an unusual parsing mode...

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect

// Strictly speaking, seeing an <option> doesn't mean we're in a <select>

// but

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption

// No special behavior since these rules fall back to "in body" mode for

// all except special table nodes which cause bad parsing behavior anyway.

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

// Probably in the "in body" parsing mode, so we outlaw only tag combos

// where the parsing rules cause implicit opens or closes to be added.

// These tags are only valid with a few parents that have special child

// parsing rules -- if we're down here, then none of those matched and

// so we allow it only if we don't know what the parent is, as all other

// cases are invalid.

// Spec says something about storing a list of markers, but it sounds

// equivalent to this check.

// We create tags in the namespace of their parent container, except HTML

// tags get no namespace.

// Should this check be gated by parent namespace? Not sure we want to

// allow <SVG> or <mATH>.

// Create the script via .innerHTML so its "parser-inserted" flag is

// set to true and it does not execute

// This is guaranteed to yield a script element.

// $FlowIssue `createElement` should be updated for Web Components

// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`

// attributes on `select`s needs to be added before `option`s are inserted.

// This prevents:

// - a bug where the `select` does not scroll to the correct option because singular

//  `select` elements automatically pick the first item #13222

// - a bug where the `select` set the first item as selected despite the `size` attribute #14239

// See https://github.com/facebook/react/issues/13222

// and https://github.com/facebook/react/issues/14239

// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.

// See discussion in https://github.com/facebook/react/pull/6896

// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240

// Setting a size greater than 1 causes a select to behave like `multiple=true`, where

// it is possible that no option is selected.

// This is only necessary when a select in "single selection mode".

// This initialization code may run even on server environments

// if a component just imports ReactDOM (e.g. for findDOMNode).

// Some environments might not have setTimeout or clearTimeout.

// This container might be used for a portal.

// If something inside a portal is clicked, that click should bubble

// through the React tree. However, on Mobile Safari the click would

// never bubble through the *DOM* tree unless an ancestor with onclick

// event exists. So we wouldn't see it and dispatch it.

// This is why we ensure that non React root containers have inline onclick

// defined.

// https://github.com/facebook/react/issues/11918

// Delete all nodes within this suspense boundary.

// There might be nested nodes so we need to keep track of how

// deep we are and only break out when we're back on top.

// TODO: Warn, we didn't find the end comment boundary.

// -------------------

//     Hydration

// Skip non-hydratable nodes.

// TODO: Possibly defer this until the commit phase where all the events

// get attached.

// Built-in SSR attribute is whitelisted

// Controlled attributes are not validated

// TODO: Only ignore them on controlled tags.

// Intentionally use the original name.

// See discussion in https://github.com/facebook/react/pull/10676.

// For text content children we compare against textContent. This

// might match additional HTML that is hidden when we read it using

// textContent. E.g. "foo" will match "f<span>oo</span>" but that still

// satisfies our requirement. Our requirement is not to produce perfect

// HTML and attributes. Ideally we should preserve structure but it's

// ok not to if the visible content is still enough to indicate what

// even listeners these nodes might be wired up to.

// TODO: Warn if there is more than a single textNode as a child.

// TODO: Should we use domElement.firstChild.nodeValue to compare?

// Convince Flow we've calculated it (it's DEV-only in this method.)

// Validate that the properties correspond to their expected values.

// $FlowFixMe - Should be inferred as not undefined.

// If an SVG prop is supplied with bad casing, it will

// be successfully parsed from HTML, but will produce a mismatch

// (and would be incorrectly rendered on the client).

// However, we already warn about bad casing elsewhere.

// So we'll skip the misleading extra mismatch warning in this case.

// For input and textarea we current always set the value property at

// post mount to force it to diverge from attributes. However, for

// option and select we don't quite do the same thing and select

// is not resilient to the DOM state changing so we don't do that here.

// TODO: Consider not doing this for input and textarea.

// Prefix measurements so that it's possible to filter them.

// Longer prefixes are hard to read in DevTools.

// If previous mark was missing for some reason, this will throw.

// This could only happen if React crashed in an unexpected place earlier.

// Don't pile on with more errors.

// Clear marks immediately to avoid growing buffer.

// During the commit phase, we don't show duplicate labels because

// there is a fixed overhead for every measurement, and we don't

// want to stretch the commit phase beyond necessary.

// Host components should be skipped in the timeline.

// We could check typeof fiber.type, but does this work with RN?

// Stops all currently active measurements so that they can be resumed

// if we continue in a later deferred loop from the same unit of work.

// Resumes all measurements that were active during the last deferred loop.

// If we pause, this is the fiber to unwind from.

// Remember we shouldn't complete measurement for this fiber.

// Otherwise flamechart will be deep even for small updates.

// If we pause, its parent is the fiber to unwind from.

// Pause any measurements until the next loop.

// A cursor to the current merged context object on the stack.

// A cursor to a boolean indicating whether the context has changed.

// Avoid recreating masked context unless unmasked context has changed.

// Failing to do this will result in unnecessary calls to componentWillReceiveProps.

// This may trigger infinite loops if componentWillReceiveProps calls setState.

// Cache unmasked context so we can avoid recreating masked context unless necessary.

// Context is created before the class component is instantiated so check for instance.

// TODO (bvaughn) Replace this behavior with an invariant() in the future.

// It has only been added in Fiber to match the (unintentional) behavior in Stack.

// In practice, there is one case in which we won't get a stack. It's when

// somebody calls unstable_renderSubtreeIntoContainer() and we process

// context from the parent component instance. The stack will be missing

// because it's outside of the reconciliation, and so the pointer has not

// been set. This is rare and doesn't matter. We'll also remove that API.

// We push the context as early as possible to ensure stack integrity.

// If the instance does not exist yet, we will push null at first,

// and replace it on the stack later when invalidating the context.

// Remember the parent context so we can merge with it later.

// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

// Merge parent and own context.

// Skip this if we're not updating due to sCU.

// This avoids unnecessarily recomputing memoized values.

// Replace the old (or empty) context with the new one.

// It is important to unwind the context in the reverse order.

// Now push the new context and mark that it has changed.

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.

// Math.pow(2, 30) - 1

// 0b111111111111111111111111111111

// 1 unit of expiration time represents 10ms.

// Always add an offset so that we don't clash with the magic number for NoWork.

// We intentionally set a higher expiration time for interactive updates in

// dev than in production.

// If the main thread is being blocked so long that you hit the expiration,

// it's a problem that could be solved with better scheduling.

// People will be more likely to notice this and fix it with the long

// expiration time in development.

// In production we opt for better UX at the risk of masking scheduling

// problems, by expiring fast.

// This is necessary for Rollup to not consider these unused.

// https://github.com/rollup/rollup/issues/1771

// TODO: we can remove these if Rollup fixes the bug.

// TODO: Consider warning about bad polyfills

// A Fiber is work on a Component that needs to be done or was done. There can

// be more than one per component.

// Instance

// Fiber

// Effects

// Note: The following is done to avoid a v8 performance cliff.

// Initializing the fields below to smis and later updating them with

// double values will cause Fibers to end up having separate shapes.

// This behavior/bug has something to do with Object.preventExtension().

// Fortunately this only impacts DEV builds.

// Unfortunately it makes React unusably slow for some applications.

// To work around this, initialize the fields below with doubles.

// Learn more about this here:

// https://github.com/facebook/react/issues/14365

// https://bugs.chromium.org/p/v8/issues/detail?id=8538

// It's okay to replace the initial doubles with smis after initialization.

// This won't trigger the performance cliff mentioned above,

// and it simplifies other profiler code (including DevTools).

// This is a constructor function, rather than a POJO constructor, still

// please ensure we do the following:

// 1) Nobody should add any instance methods on this. Instance methods can be

//    more difficult to predict when they get optimized and they are almost

//    never inlined properly in static compilers.

// 2) Nobody should rely on `instanceof Fiber` for type testing. We should

//    always know when it is a fiber.

// 3) We might want to experiment with using numeric keys since they are easier

//    to optimize in a non-JIT environment.

// 4) We can easily go from a constructor to a createFiber object literal if that

//    is faster.

// 5) It should be easy to port this to a C struct and keep a C implementation

//    compatible.

// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors

// This is used to create an alternate fiber to do work on.

// We use a double buffering pooling technique because we know that we'll

// only ever need at most two versions of a tree. We pool the "other" unused

// node that we're free to reuse. This is lazily created to avoid allocating

// extra objects for things that are never updated. It also allow us to

// reclaim the extra memory if needed.

// DEV-only fields

// We already have an alternate.

// Reset the effect tag.

// The effect list is no longer valid.

// We intentionally reset, rather than copy, actualDuration & actualStartTime.

// This prevents time from endlessly accumulating in new commits.

// This has the downside of resetting values for different priority renders,

// But works for yielding (the common case) and should support resuming.

// These will be overridden during the parent's reconciliation

// React$ElementType

// TODO: The Profiler fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

// This is a consumer

// TODO: The Mode fiber shouldn't have a type. It has a tag.

// Used by persistent updates

// Used for stashing WIP properties to replay failed work in DEV.

// This Fiber's initial properties will always be overwritten.

// We only use a Fiber to ensure the same hidden class so DEV isn't slow.

// This is intentionally written as a list of all properties.

// We tried to use Object.assign() instead but this is called in

// the hottest path, and Object.assign() was too slow:

// https://github.com/facebook/react/issues/12502

// This code is DEV-only so size is not a concern.

// TODO: This should be lifted into the renderer.

// The following attributes are only used by interaction tracing builds.

// They enable interactions to be associated with their async work,

// And expose interaction metadata to the React DevTools Profiler plugin.

// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.

// Exported FiberRoot type includes all properties,

// To avoid requiring potentially error-prone :any casts throughout the project.

// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).

// The types are defined separately within this file to ensure they stay in sync.

// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

// Cyclic construction. This cheats the type system right now because

// stateNode is any.

// Always collect profile timings when DevTools are present.

// This enables DevTools to start capturing timing at any point–

// Without some nodes in the tree having empty base times.

// The reason for the way the Flow types are structured in this file,

// Is to avoid needing :any casts everywhere interaction tracing fields are used.

// Unfortunately that requires an :any cast for non-interaction tracing capable builds.

// $FlowFixMe Remove this :any cast and replace it with something better.

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

// Dedup strategy: Warn once per component.

// Don't warn about react-lifecycles-compat polyfilled components.

// This is difficult to track any other way since component names

// are often vague and are likely to collide between 3rd party libraries.

// An expand property is probably okay to use here since it's DEV-only,

// and will only be set in the event of serious warnings.

// This lets us hook into Fiber to debug what it's doing.

// See https://github.com/facebook/react/pull/8033.

// This is not part of the public API, not even for React DevTools.

// You may only inject a debugTool if you work on React Fiber itself.

// TODO: Offscreen updates should never suspend. However, a promise that

// suspended inside an offscreen subtree should be able to ping at the priority

// of the outer render.

// If there's a gap between completing a failed root and retrying it,

// additional updates may be scheduled. Clear `didError`, in case the update

// is sufficient to fix the error.

// Update the latest and earliest pending times

// No other pending updates.

// This is the earliest pending update.

// This is the latest pending update

// First, check the known pending levels and update them if needed.

// Both known pending levels were suspended. Clear them.

// The latest pending level was suspended. Clear by setting it to the

// latest pending level.

// Finally, update the known suspended levels.

// No other suspended levels.

// This is the earliest suspended level.

// This is the latest suspended level

// If there is no pending or pinged work, check if there's suspended work

// that's lower priority than what we just completed.

// The lowest priority suspended work is the work most likely to be

// committed next. Let's start rendering it again, so that if it times out,

// it's ready to commit.

// Expire using the earliest known expiration time.

// Resolve default props. Taken from ReactElement

// Invoke the function an extra time to help detect side-effects.

// Merge the partial state and the previous state.

// Once the update queue is empty, persist the derived state onto the

// base state.

// This is so gross but it's at least non-critical and can be removed if

// it causes problems. This is meant to give a nicer error message for

// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,

// ...)) which otherwise throws a "_processChildContext is not a function"

// exception.

// The instance needs access to the fiber so that it can schedule updates

// Allow null for conditional declaration

// Instantiate twice to help detect side-effects.

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// Warn about these lifecycles if they are present.

// Don't warn about react-lifecycles-compat polyfilled methods though.

// ReactFiberContext usually updates this cache but can't for newly-created instances.

// Invokes the mount life-cycles on a previously never rendered instance.

// In order to support react-lifecycles-compat polyfilled components,

// Unsafe lifecycles should not be invoked for components using the new APIs.

// If we had additional state updates during this life-cycle, let's

// process them now.

/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

// Check if previous string ref matches new string ref

// This is a lazy pooled frozen object, so we need to initialize.

// This wrapper function exists because I expect to clone the code in each path

// to be able to optimize each path individually by branching early. This needs

// a compiler or we can do it manually. Helpers that don't need this branching

// live outside of this function.

// Deletions are added in reversed order so we add it to the front.

// At this point, the return fiber's effect list is empty except for

// deletions, so we can just append the deletion to the list. The remaining

// effects aren't added until the complete phase. Once we implement

// resuming, this may not be true.

// Noop.

// TODO: For the shouldClone case, this could be micro-optimized a bit by

// assuming that after the first child we've already added everything.

// Add the remaining children to a temporary map so that we can find them by

// keys quickly. Implicit (null) keys get added to this set with their index

// We currently set sibling to null and index to 0 here because it is easy

// to forget to do before returning it. E.g. for the single child case.

// This is an insertion.

// This is a move.

// This is simpler for the single child case. We only need to do a

// placement for inserting new children.

// Insert

// Update

// Move based on index

// Text nodes don't have keys. If the previous node is implicitly keyed

// we can continue to replace it without aborting even if it is not a text

// node.

// Update the fiber if the keys match, otherwise return null.

/**
   * Warns if there is a duplicate or missing key
   */

// This API will tag the children with the side-effect of the reconciliation

// itself. They will be added to the side-effect list as we pass through the

// children and the parent.

// This function is not recursive.

// If the top level item is an array, we treat it as a set of children,

// not as a fragment. Nested arrays on the other hand will be treated as

// fragment nodes. Recursion happens at the normal flow.

// Handle top level unkeyed fragments as if they were arrays.

// This leads to an ambiguity between <>{[...]}</> and <>...</>.

// We treat the ambiguous cases above the same.

// Handle object types

// TODO: If key === null and child.key === null, then this only applies to

// the first item in the list.

// There's no need to check for keys on text nodes since we don't have a

// way to define them.

// We already have an existing node so let's just update it and delete

// the rest.

// The existing first child is not a text node so we need to create one

// and delete the existing ones.

// First, validate keys.

// TODO: This breaks on empty slots like null children. That's

// unfortunate because it triggers the slow path all the time. We need

// a better way to communicate whether this was a miss or null,

// boolean, undefined, etc.

// We matched the slot, but we didn't reuse the existing fiber, so we

// need to delete the existing child.

// TODO: Move out of the loop. This only happens for the first run.

// TODO: Defer siblings if we're not at the right index for this slot.

// I.e. if we had null values before, then we want to defer this

// for each null value. However, we also don't want to call updateSlot

// with the previous one.

// We've reached the end of the new children. We can delete the rest.

// If we don't have any more existing children we can choose a fast path

// since the rest will all be insertions.

// Add all children to a key map for quick lookups.

// Keep scanning and use the map to restore deleted items as moves.

// The new fiber is a work in progress, but if there exists a

// current, that means that we reused the fiber. We need to delete

// it from the child list so that we don't add it to the deletion

// list.

// Any existing children that weren't consumed above were deleted. We need

// to add them to the deletion list.

// This is the same implementation as reconcileChildrenArray(),

// but using the iterator instead.

// We don't support rendering Generators because it's a mutation.

// See https://github.com/facebook/react/issues/12995

// $FlowFixMe Flow doesn't know about toStringTag

// Warn about using Maps as children

// We'll get a different iterator later for the main pass.

// If the new child is undefined, and the return fiber is a composite

// component, throw an error. If Fiber return types are disabled,

// we already threw above.

// We allow auto-mocks to proceed as if they're returning null.

// Intentionally fall through to the next case, which handles both

// functions and classes

// eslint-disable-next-lined no-fallthrough

// Remaining cases are all treated as empty.

// Push current root instance onto the stack;

// This allows us to reset root when portals are popped.

// Track the context and the Fiber that provided it.

// This enables us to pop only Fibers that provide unique contexts.

// Finally, we need to push the host context to the stack.

// However, we can't just call getRootHostContext() and push it because

// we'd have a different number of entries on the stack depending on

// whether getRootHostContext() throws somewhere in renderer code or not.

// So we push an empty value first. This lets us safely unwind on errors.

// Now that we know this function doesn't throw, replace it.

// Don't push this Fiber's context unless it's unique.

// Do not pop unless this Fiber provided the current context.

// pushHostContext() only pushes Fibers that provide unique contexts.

/*      */

/*       */

// These are set right before calling the component.

// The work-in-progress fiber. I've named it differently to distinguish it from

// the work-in-progress hook.

// Extra space so second column lines up

// lol @ IE not supporting String#repeat

// Don't bother comparing lengths in prod because these arrays should be

// passed inline.

// Start over from the beginning of the list

// Also validate hook order for cascading updates.

// We can assume the previous dispatcher is always this one, since we set it

// at the beginning of the render phase and there's no re-entrancy.

// This check uses currentHook so that it works the same in DEV and prod bundles.

// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

// These were reset above

// didScheduleRenderPhaseUpdate = false;

// renderPhaseUpdates = null;

// numberOfReRenders = 0;

// This is used to reset the state of this module when a component throws.

// It's also called inside mountIndeterminateComponent if we determine the

// component is a module-style component.

// This is the first hook in the list

// Append to the end of the list

// This function is used both for updates and for re-renders triggered by a

// render phase update. It assumes there is either a current hook we can

// clone, or a work-in-progress hook from a previous render pass that we can

// use as a base. When we reach the end of the base list, we must switch to

// the dispatcher used for mounts.

// There's already a work-in-progress. Reuse it.

// Clone from the current hook.

// This is the first hook in the list.

// Flow doesn't know this is non-null, but we do.

// This is a re-render. Apply the new render phase updates to the previous

// Render phase updates are stored in a map of queue -> linked list

// Mark that the fiber performed work, but only if the new state is

// different from the current state.

// Don't persist the state accumlated from the render phase updates to

// the base state unless the queue is empty.

// TODO: Not sure if this is the desired semantics, but it's what we

// do for gDSFP. I can't remember why.

// The last update in the entire queue

// The last update that is part of the base state.

// For the first update, the queue is a circular linked list where

// `queue.last.next = queue.first`. Once the first update commits, and

// the `baseUpdate` is no longer empty, we can unravel the list.

// Priority is insufficient. Skip this update. If this is the first

// skipped update, the previous update/state is the new base

// update/state.

// Update the remaining priority in the queue.

// Process this update.

// If this update was processed eagerly, and its reducer matches the

// current reducer, we can use the eagerly computed state.

// Circular

// TODO: If deps are provided, should we skip comparing the ref itself?

// This hook is normally a no-op.

// The react-debug-hooks package injects its own implementation

// so that e.g. DevTools can display custom hook values.

// in a test-like environment, we want to warn if dispatchAction()

// is called outside of a batchedUpdates/TestUtils.act(...) call.

// This is a render phase update. Stash it in a lazily-created map of

// queue -> linked list of updates. After this render pass, we'll restart

// and apply the stashed updates on top of the work-in-progress hook.

// Append the update to the end of the list.

// This is the first update. Create a circular list.

// Still circular.

// The queue is currently empty, which means we can eagerly compute the

// next state before entering the render phase. If the new state is the

// same as the current state, we may be able to bail out entirely.

// Stash the eagerly computed state, and the reducer used to compute

// it, on the update object. If the reducer hasn't changed by the

// time we enter the render phase, then the eager state can be used

// without calling the reducer again.

// Fast path. We can bail out without scheduling React to re-render.

// It's still possible that we'll need to rebase this update later,

// if the component re-renders for a different reason and by that

// time the reducer has changed.

// Suppress the error. It will throw again in the render phase.

// jest isn't a 'global', it's just exposed to tests via a wrapped function

// further, this isn't a test file, so flow doesn't recognize the symbol. So...

// $FlowExpectedError - because requirements don't give a damn about your type sigs.

// The deepest Fiber on the stack involved in a hydration context.

// This may have been an insertion or a hydration.

// TODO: These should not need a type.

// This might seem like it belongs on progressedFirstDeletion. However,

// these children are not part of the reconciliation list of children.

// Even if we abort and rereconcile the children, that will try to hydrate

// again and the nodes are still in the host tree so these will be

// recreated.

// This has now been refined to an element node.

// This has now been refined to a text node.

// This has now been refined to a suspense node.

// Downgrade the tag to a dehydrated component until we've hydrated it.

// Nothing to hydrate. Make it an insertion.

// If we can't hydrate this instance let's try the next one.

// We use this as a heuristic. It's based on intuition and not data so it

// might be flawed or unnecessary.

// We matched the next one, we'll now assume that the first one was

// superfluous and we'll delete it. Since we can't eagerly delete it

// we'll have to schedule a deletion. To do that, this node needs a dummy

// fiber associated with it.

// We assume that prepareToHydrateHostTextInstance is called in a context where the

// hydration parent is the parent host component of this host text.

// Skip past all nodes within this suspense boundary.

// We're deeper than the current hydration context, inside an inserted

// tree.

// If we're not currently hydrating but we're in a hydration context, then

// we were an insertion and now need to pop up reenter hydration of our

// siblings.

// If we have any remaining hydratable nodes, we need to delete them now.

// We only do this deeper than head and body since they tend to have random

// other nodes in them. We also ignore components with pure text content in

// side of them.

// TODO: Better heuristic.

// If this is a fresh new component that hasn't been rendered yet, we

// won't update its child set by applying minimal side-effects. Instead,

// we will add them all to the child before it gets rendered. That means

// we can optimize this reconciliation pass by not tracking side-effects.

// Lazy component props can't be validated in createElement

// because they're only guaranteed to be resolved here.

// Resolved props

// React DevTools reads this flag.

// SimpleMemoComponent codepath doesn't resolve outer props either.

// If this is a plain function component without default props,

// and with only the default shallow comparison, we upgrade it

// to a SimpleMemoComponent to allow fast path updates.

// Inner memo component props aren't currently validated in createElement.

// We could move it there, but we'd still need this for lazy code path.

// This is always exactly one child

// This will be the props with resolved defaultProps,

// unlike current.memoizedProps which will be the unresolved ones.

// Default to shallow comparison

// We warn when you define propTypes on lazy()

// so let's just skip over it to find memo() outer wrapper.

// Inner props for memo are validated later.

// Resolved (SimpleMemoComponent has no defaultProps)

// Inner propTypes will be validated in the function component path.

// Schedule a Ref effect

// Push context providers early to prevent context stack mismatches.

// During mounting we don't know the child context yet as the instance doesn't exist.

// We will invalidate the child context in finishClassComponent() right after rendering.

// An class component without an instance only mounts if it suspended

// inside a non- concurrent tree, in an inconsistent state. We want to

// tree it like a new mount, even though an empty version of it already

// committed. Disconnect the alternate pointers.

// Since this is conceptually a new fiber, schedule a Placement effect

// In the initial pass we might need to construct the instance.

// Note: During these life-cycles, instance.props/instance.state are what

// ever the previously attempted to render - not the "current". However,

// during componentDidUpdate we pass the "current" props.

// If an update was already in progress, we should schedule an Update

// effect even though we're bailing out, so that cWU/cDU are called.

// If shouldComponentUpdate returned false, we should still update the

// memoized state to indicate that this work can be reused.

// Update the existing instance's state, props, and context pointers even

// if shouldComponentUpdate returns false.

// Invokes the update life-cycles and returns false if it shouldn't rerender.

// memoized props/state to indicate that this work can be reused.

// Refs should update even if shouldComponentUpdate returns false

// Context providers should defer to sCU for rendering

// Rerender

// If we captured an error, but getDerivedStateFrom catch is not defined,

// unmount all the children. componentDidCatch will schedule an update to

// re-render a fallback. This is temporary until we migrate everyone to

// the new API.

// TODO: Warn in a future release.

// If we're recovering from an error, reconcile without reusing any of

// the existing children. Conceptually, the normal children and the children

// that are shown on error are two different sets, so we shouldn't reuse

// normal children even if their identities match.

// This function is fork of reconcileChildren. It's used in cases where we

// want to reconcile without matching against the existing set. This has the

// effect of all current children being unmounted; even if the type and key

// are the same, the old child is unmounted and a new child is created.

// To do this, we're going to go through the reconcile algorithm twice. In

// the first pass, we schedule a deletion for all the current children by

// passing null.

// In the second pass, we mount the new children. The trick here is that we

// pass null in place of where we usually pass the current child set. This has

// the effect of remounting all children regardless of whether their their

// identity matches.

// Memoize state using the values we just used to render.

// TODO: Restructure so we never read values from the instance.

// The context might have changed so we need to recalculate it.

// Should always be set

// Caution: React DevTools currently depends on this property

// being called "element".

// If the state is the same as before, that's a bailout because we had

// no work that expires at this time.

// If we don't have any current children this might be the first pass.

// We always try to hydrate. If this isn't a hydration pass there won't

// be any children to hydrate which is effectively the same thing as

// not hydrating.

// This is a bit of a hack. We track the host root as a placement to

// know that we're currently in a mounting state. That way isMounted

// works as expected. We must reset this before committing.

// TODO: Delete this when we delete isMounted and findDOMNode.

// Ensure that children mount into this root without tracking

// side-effects. This ensures that we don't store Placement effects on

// nodes that will be hydrated.

// Otherwise reset hydration state in case we aborted and resumed another

// root.

// An lazy component only mounts if it suspended inside a non-

// concurrent tree, in an inconsistent state. We want to treat it like

// a new mount, even though an empty version of it already committed.

// Disconnect the alternate pointers.

// We can't start a User Timing measurement with correct label yet.

// Cancel and resume right after we know the tag.

// Handle synchronous thenables.

// Store the unwrapped component in the type.

// Resolved for outer only

// The inner type can have defaults too

// This message intentionally doesn't mention ForwardRef or MemoComponent

// because the fact that it's a separate type of work is an

// implementation detail.

// This is the first attempt.

// Something in this boundary's subtree already suspended. Switch to

// rendering the fallback children.

// This next part is a bit confusing. If the children timeout, we switch to

// showing the fallback children in place of the "primary" children.

// However, we don't want to delete the primary children because then their

// state will be lost (both the React state and the host state, e.g.

// uncontrolled form inputs). Instead we keep them mounted and hide them.

// Both the fallback children AND the primary children are rendered at the

// same time. Once the primary children are un-suspended, we can delete

// the fallback children — don't need to preserve their state.

// The two sets of children are siblings in the host environment, but

// semantically, for purposes of reconciliation, they are two separate sets.

// So we store them using two fragment fibers.

// However, we want to avoid allocating extra fibers for every placeholder.

// They're only necessary when the children time out, because that's the

// only time when both sets are mounted.

// So, the extra fragment fibers are only used if the children time out.

// Otherwise, we render the primary children directly. This requires some

// custom reconciliation logic to preserve the state of the primary

// children. It's essentially a very basic form of re-parenting.

// `child` points to the child fiber. In the normal case, this is the first

// fiber of the primary children set. In the timed-out case, it's a

// a fragment fiber containing the primary children.

// `next` points to the next fiber React should render. In the normal case,

// it's the same as `child`: the first fiber of the primary children set.

// In the timed-out case, it's a fragment fiber containing the *fallback*

// children -- we skip over the primary children entirely.

// This is the initial mount. This branch is pretty simple because there's

// no previous state that needs to be preserved.

// Mount separate fragments for primary and fallback children.

// Outside of concurrent mode, we commit the effects from the

// Skip the primary children, and continue working on the

// fallback children.

// Mount the primary children without an intermediate fragment fiber.

// The current tree already timed out. That means each child set is

// Still timed out. Reuse the current primary children by cloning

// its fragment. We're going to skip over these entirely.

// Because primaryChildFragment is a new fiber that we're inserting as the

// parent of a new tree, we need to set its treeBaseDuration.

// treeBaseDuration is the sum of all the child tree base durations.

// Clone the fallback child fragment, too. These we'll continue

// working on.

// No longer suspended. Switch back to showing the primary children,

// and remove the intermediate fragment fiber.

// If this render doesn't suspend, we need to delete the fallback

// children. Wait until the complete phase, after we've confirmed the

// fallback is no longer needed.

// TODO: Would it be better to store the fallback fragment on

// the stateNode?

// Continue rendering the children, like we normally do.

// The current tree has not already timed out. That means the primary

// children are not wrapped in a fragment fiber.

// Timed out. Wrap the children in a fragment fiber to keep them

// separate from the fallback children.

// It shouldn't matter what the pending props are because we aren't

// going to render this fragment.

// Even though we're creating a new fiber, there are no new children,

// because we're reusing an already mounted tree. So we don't need to

// schedule a placement.

// primaryChildFragment.effectTag |= Placement;

// Create a fragment from the fallback children, too.

// Still haven't timed out.  Continue rendering the children, like we

// normally do.

// During the first pass, we'll bail out and not drill into the children.

// Instead, we'll leave the content in place and try to hydrate it later.

// We use childExpirationTime to indicate that a child might depend on context, so if

// any context has changed, we need to treat is as if the input might have changed.

// This boundary has changed since the first render. This means that we are now unable to

// hydrate it. We might still be able to hydrate it using an earlier expiration time but

// during this render we can't. Instead, we're going to delete the whole subtree and

// instead inject a new real Suspense boundary to take its place, which may render content

// or fallback. The real Suspense boundary will suspend for a while so we have some time

// to ensure it can produce real content, but all state and pending events will be lost.

// Detach from the current dehydrated boundary.

// Insert a deletion in the effect list.

// Retry as a real Suspense component.

// Upgrade this work in progress to a real Suspense component.

// This is now an insertion.

// Something suspended. Leave the existing children in place.

// TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?

// No change

// No change. Bailout early if children are the same.

// The context value changed. Search for matching consumers and schedule

// them to update.

// Set the return pointer of the child to the work-in-progress fiber.

// Visit this fiber.

// Check if the context matches.

// Match! Schedule an update on this fiber.

// Schedule a force update on the work-in-progress.

// TODO: Because we don't have a work-in-progress, this will add the

// update to the current fiber, too, which means it will persist even if

// this render is thrown away. Since it's a race condition, not sure it's

// worth fixing.

// Mark the expiration time on the list, too.

// Since we already found a match, we can stop traversing the

// dependency list.

// Don't scan deeper if this is a matching provider

// If a dehydrated suspense component is in this subtree, we don't know

// if it will have any context consumers in it. The best we can do is

// mark it as having updates on its children.

// This is intentionally passing this fiber as the parent

// because we want to schedule this fiber as having work

// on its children. We'll use the childExpirationTime on

// this fiber to indicate that a context has changed.

// Traverse down.

// No child. Traverse to next sibling.

// We're back to the root of this subtree. Exit.

// Set the return pointer of the sibling to the work-in-progress fiber.

// No more siblings. Traverse up.

// Reuse previous context list

// Don't update "base" render times for bailouts.

// This fiber doesn't have work, but its subtree does. Clone the child

// fibers and continue.

// If props or context changed, mark the fiber as having performed work.

// This may be unset if the props are determined to be equal later (memo).

// This fiber does not have any pending work. Bailout without entering

// the begin phase. There's still some bookkeeping we that needs to be done

// in this optimized path, mostly pushing stuff onto the stack.

// If this boundary is currently timed out, we need to decide

// whether to retry the primary children, or to skip over it and

// go straight to the fallback. Check the priority of the primary

// The primary children have pending work. Use the normal path

// to attempt to render the primary children again.

// The primary children do not have pending work with sufficient

// priority. Bailout.

// We know that this component will suspend again because if it has

// been unsuspended it has committed as a regular Suspense component.

// If it needs to be retried, it should have work scheduled on it.

// Before entering the begin phase, clear the expiration time.

// An indeterminate component only mounts if it suspended inside a non-

// Proceed under the assumption that this is a function component

// Proceed under the assumption that this is a class instance

// Throw out any hooks that were used.

// Check the host config to see if the children are offscreen/hidden.

// We special case a direct text child of a host node. This is a common

// case. We won't handle it as a reified child. We will instead handle

// this in the host environment that also have access to this prop. That

// avoids allocating another HostText fiber and traversing it.

// If we're switching from a direct text child to a normal child, or to

// empty, we need to schedule the text content to be reset.

// Schedule this fiber to re-render at offscreen priority. Then bailout.

// Nothing to do here. This is terminal. We'll do the completion step

// immediately after.

// Portals are special because we don't append the children during mount

// but at commit. Therefore we need to track insertions which the normal

// flow doesn't do during mount. This doesn't happen at the root because

// the root always starts with a "current" with a null child.

// TODO: Consider unifying this with how the root works.

// The logic below for Context differs depending on PROD or DEV mode. In

// DEV mode, we create a separate object for Context.Consumer that acts

// like a proxy to Context. This proxy object adds unnecessary code in PROD

// so we use the old behaviour (Context.Consumer references Context) to

// reduce size and overhead. The separate object references context via

// a property called "_context", which also gives us the ability to check

// in DEV mode if this property exists or not and warn if it does not.

// This may be because it's a Context (rather than a Consumer).

// Or it may be because it's older React where they're the same thing.

// We only want to warn if we're sure it's a new React.

// An incomplete component only mounts if it suspended inside a non-

// Promote the fiber to a class and try rendering again.

// The rest of this function is a fork of `updateClassComponent`

// Use this to detect multiple renderers using the same context

// This is called right before React yields execution, to ensure `readContext`

// cannot be called outside the render phase.

// Update the child expiration time of all the ancestors, including

// the alternates.

// Neither alternate was updated, which means the rest of the

// ancestor path already has sufficient priority.

// Context list has a pending update. Mark that this fiber performed work.

// Reset the work-in-progress list

// This warning would fire if you read context inside a Hook like useMemo.

// Unlike the class check below, it's not enforced in production for perf.

// Avoid deopting on observable arguments or heterogeneous types.

// Observe all updates.

// This is the first dependency for this component. Create a new list.

// Append a new context item.

// UpdateQueue is a linked list of prioritized updates.

// Like fibers, update queues come in pairs: a current queue, which represents

// the visible state of the screen, and a work-in-progress queue, which can be

// mutated and processed asynchronously before it is committed — a form of

// double buffering. If a work-in-progress render is discarded before finishing,

// we create a new work-in-progress by cloning the current queue.

// Both queues share a persistent, singly-linked list structure. To schedule an

// update, we append it to the end of both queues. Each queue maintains a

// pointer to first update in the persistent list that hasn't been processed.

// The work-in-progress pointer always has a position equal to or greater than

// the current queue, since we always work on that one. The current queue's

// pointer is only updated during the commit phase, when we swap in the

// work-in-progress.

// For example:

//   Current pointer:           A - B - C - D - E - F

//   Work-in-progress pointer:              D - E - F

//                                          ^

//                                          The work-in-progress queue has

//                                          processed more updates than current.

// The reason we append to both queues is because otherwise we might drop

// updates without ever processing them. For example, if we only add updates to

// the work-in-progress queue, some updates could be lost whenever a work-in

// -progress render restarts by cloning from current. Similarly, if we only add

// updates to the current queue, the updates will be lost whenever an already

// in-progress queue commits and swaps with the current queue. However, by

// adding to both queues, we guarantee that the update will be part of the next

// work-in-progress. (And because the work-in-progress queue becomes the

// current queue once it commits, there's no danger of applying the same

// update twice.)

// Prioritization

// --------------

// Updates are not sorted by priority, but by insertion; new updates are always

// appended to the end of the list.

// The priority is still important, though. When processing the update queue

// during the render phase, only the updates with sufficient priority are

// included in the result. If we skip an update because it has insufficient

// priority, it remains in the queue to be processed later, during a lower

// priority render. Crucially, all updates subsequent to a skipped update also

// remain in the queue *regardless of their priority*. That means high priority

// updates are sometimes processed twice, at two separate priorities. We also

// keep track of a base state, that represents the state before the first

// update in the queue is applied.

//   Given a base state of '', and the following queue of updates

//     A1 - B2 - C1 - D2

//   where the number indicates the priority, and the update is applied to the

//   previous state by appending a letter, React will process these updates as

//   two separate renders, one per distinct priority level:

//   First render, at priority 1:

//     Base state: ''

//     Updates: [A1, C1]

//     Result state: 'AC'

//   Second render, at priority 2:

//     Base state: 'A'            <-  The base state does not include C1,

//                                    because B2 was skipped.

//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2

//     Result state: 'ABCD'

// Because we process updates in insertion order, and rebase high priority

// updates when preceding updates are skipped, the final result is deterministic

// regardless of priority. Intermediate state may vary according to system

// resources, but the final state is always the same.

// TODO: With resuming, if we bail out and resuse the child tree, we should

// keep these effects.

// Queue is empty

// Update queues are created lazily.

// There's only one fiber.

// There are two owners.

// Neither fiber has an update queue. Create new ones.

// Only one fiber has an update queue. Clone to create a new one.

// There's only a single queue.

// There are two queues. We need to append the update to both queues,

// while accounting for the persistent structure of the list — we don't

// want the same update to be added multiple times.

// One of the queues is not empty. We must add the update to both queues.

// Both queues are non-empty. The last update is the same in both lists,

// because of structural sharing. So, only append to one of the lists.

// But we still need to update the `lastUpdate` pointer of queue2.

// Captured updates go into a separate list, and only on the work-in-

// progress queue.

// This is the first render phase update

// State object

// Intentional fallthrough

// Partial state object

// These values may change as we process the queue.

// This update does not have sufficient priority. Skip it.

// This is the first skipped update. It will be the first update in

// the new list.

// Since this is the first update that was skipped, the current result

// is the new base state.

// Since this update will remain in the list, update the remaining

// expiration time.

// This update does have sufficient priority. Process it and compute

// a new result.

// Set this to null, in case it was mutated during an aborted render.

// Continue to the next update.

// Separately, iterate though the list of captured updates.

// This is the first skipped captured update. It will be the first

// update in the new list.

// If this is the first update that was skipped, the current result is

// the new base state.

// We processed every update, without skipping. That means the new base

// state is the same as the result state.

// Set the remaining expiration time to be whatever is remaining in the queue.

// This should be fine because the only two other things that contribute to

// expiration time are props and context. We're already in the middle of the

// begin phase by the time we start processing the queue, so we've already

// dealt with the props. Context in components that specify

// shouldComponentUpdate is tricky; but we'll have to account for

// that regardless.

// If the finished render included captured updates, and there are still

// lower priority updates left over, we need to keep the captured updates

// in the queue so that they are rebased and not dropped once we process the

// queue again at the lower priority.

// Join the captured update list to the end of the normal list.

// Clear the list of captured updates.

// Commit the effects

// If the value is an error, call this function immediately after it is thrown

// so the stack is accurate.

// Tag the fiber with an update effect. This turns a Placement into

// a PlacementAndUpdate.

// Mutation mode

// We only have the top Fiber that was created but we need recurse down its

// children to find all the terminal nodes.

// Noop

// If we have an alternate, that means this is an update and we need to

// schedule a side-effect to do the updates.

// If we get updated because one of our children updated, we don't

// have newProps so we'll have to reuse them.

// TODO: Split the update API as separate for the props vs. children.

// Even better would be if children weren't special cased at all tho.

// If the update payload indicates that there is a change or if there

// is a new ref we mark this as an update. All the work is done in commitWork.

// TODO: Type this specific to this type of component.

// If the text differs, mark it as an update. All the work in done in commitWork.

// Persistent host tree mode

// eslint-disable-next-line no-labels

// This child is inside a timed out tree. Hide it.

// The placeholder either just timed out or switched back to the normal

// children after having previously timed out. Toggle the visibility of

// the direct host children.

// Continue traversing like normal

// $FlowFixMe This is correct but Flow is confused by the labeled break.

// An unfortunate fork of appendAllChildren because we have two different parent types.

// If children might have changed, we have to add them all to the set.

// Schedule an update on the container to swap out the container.

// No changes, just reuse the existing instance.

// Note that this might release a previous clone.

// If there are no other effects in this tree, we need to flag this node as having one.

// Even though we're not going to use it for anything.

// Otherwise parents won't know that there are new children to propagate upwards.

// If the text content differs, we'll create a new text instance for it.

// We'll have to mark it as having an effect, even though we won't use the effect for anything.

// This lets the parents know that at least one of their children has changed.

// No host operations

// If we hydrated, pop so that we can delete any remaining children

// that weren't hydrated.

// This resets the hacky state to fix isMounted before committing.

// This can happen when we abort work.

// TODO: Move createInstance to beginWork and keep it on a context

// "stack" as the parent. Then append children as we go in beginWork

// or completeWork depending on we want to add then top->down or

// bottom->up. Top->down is faster in IE11.

// TODO: Move this and createInstance step into the beginPhase

// to consolidate.

// is a new ref we mark this as an update.

// If changes to the hydrated node needs to be applied at the

// commit-phase we mark this as such.

// Certain renderers require commit-time effects for initial mount.

// (eg DOM renderer supports auto-focus for certain elements).

// Make sure such renderers get scheduled for later work.

// If there is a ref on a host node we need to schedule a callback

// If we have an alternate, that means this is an update and we need

// to schedule a side-effect to do the updates.

// Do not reset the effect list.

// Something suspended. Re-render with the fallback children.

// We just switched from the fallback to the normal children. Delete

// the fallback.

// Deletions go at the beginning of the return fiber's effect list

// If the children are hidden, or if they were previous hidden, schedule

// an effect to toggle their visibility. This is also used to attach a

// retry listener to the promise.

// Pop provider fiber

// This boundary did not suspend so it's now hydrated.

// To handle any future suspense cases, we're going to now upgrade it

// to a Suspense component. We detach it from the existing current fiber.

// Browsers support silencing uncaught errors by calling

// `preventDefault()` in window `error` handler.

// We record this information as an expando on the error.

// The error is recoverable and was silenced.

// Ignore it and don't print the stack addendum.

// This is handy for testing error boundaries without noise.

// The error is fatal. Since the silencing might have

// been accidental, we'll surface it anyway.

// However, the browser would have silenced the original error

// so we'll print it first, and then print the stack addendum.

// errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

// In development, we provide our own message with just the component stack.

// We don't include the original error message and JS stack because the browser

// has already printed it. Even if the application swallows the error, it is still

// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

// This method must not throw, or React internal state will get messed up.

// If console.error is overridden, or logCapturedError() shows a dialog that throws,

// we want to report this error outside of the normal stack as a last resort.

// https://github.com/facebook/react/issues/13188

// Capture errors so they don't interrupt unmounting.

// We could update instance props and state here,

// but instead we rely on them being set during last render.

// TODO: revisit this when we implement resuming.

// Nothing to do for these component types

// Unmount

// Mount

// Renderers may schedule work to be done after host components are mounted

// (eg DOM renderer may schedule auto-focus for inputs and form controls).

// These effects should only be committed when components are first mounted,

// aka when there is no current/alternate.

// Despite the naming that might imply otherwise, this method only

// fires if there is an `Update` effect scheduled during mounting.

// This happens if `finalizeInitialChildren` returns `true` (which it

// does to implement the `autoFocus` attribute on the client). But

// there are also other cases when this might happen (such as patching

// up text content during hydration mismatch). So we'll check this again.

// We have no life-cycles associated with portals.

// User-originating errors (lifecycles and refs) should not interrupt

// deletion, so don't let them throw. Host-originating errors should

// interrupt deletion, so it's okay

// TODO: this is recursive.

// We are also not using this parent because

// the portal will get pushed immediately.

// While we're inside a removed host node we don't want to call

// removeChild on the inner nodes because they're removed by the top

// call anyway. We also want to call componentWillUnmount on all

// composites before this host node is removed from the tree. Therefore

// Visit children because they may contain more composite or host nodes.

// Skip portals because commitUnmount() currently visits them recursively.

// If we use mutation we drill down into portals using commitUnmount above.

// If we don't use mutation we drill down into portals here instead.

// Recursively insert all host nodes into the parent.

// Note: these two variables *must* always be updated together.

// Reset the text content of the parent before doing any insertions

// Clear ContentReset from the effect tag

// We're going to search forward into the tree until we find a sibling host

// node. Unfortunately, if multiple insertions are done in a row we have to

// search past them. This leads to exponential search for the next sibling.

// If we didn't find anything, let's try the next sibling.

// If we pop out of the root or hit the parent the fiber we are the

// last sibling.

// If it is not host node and, we might have a host node inside it.

// Try to search down until we find one.

// If we don't have a child, try the siblings instead.

// We also skip portals because they are not part of this host tree.

// Check if this host node is stable or about to be placed.

// Found it!

// We only have the top Fiber that was inserted but we need to recurse down its

// We only have the top Fiber that was deleted but we need to recurse down its

// Each iteration, currentParent is populated with node's host parent if not

// currentParentIsValid.

// After all the children have unmounted, it is now safe to remove the

// node from the tree.

// Delete the dehydrated suspense boundary and all of its content.

// When we go into a portal, it becomes the parent to remove from.

// We will reassign it back when we pop the portal on the way up.

// Visit children because portals might contain host components.

// Visit children because we may find more host components below.

// When we go out of the portal, we need to restore the parent.

// Since we don't keep a stack of them, we will search for it.

// Note: We currently never use MountMutation, but useLayout uses

// UnmountMutation.

// Commit the work prepared earlier.

// For hydration we reuse the update path but we treat the oldProps

// as the newProps. The updatePayload will contain the real change in

// this case.

// Update the props handle so that we know which props are the ones with

// with current event handlers.

// Apply the diff to the DOM node.

// If the children had not already timed out, record the time.

// This is used to compute the elapsed time during subsequent

// attempts to render the children.

// Found a nested Suspense component that timed out. Skip over the

// If this boundary just timed out, then it will have a set of thenables.

// For each thenable, attach a listener so that when it resolves, React

// attempts to re-render the boundary in the primary (pre-timeout) state.

// Memoize using the boundary fiber to prevent redundant listeners.

// Unmount the root by rendering null.

// To preserve the preexisting retry behavior of error boundaries,

// we keep track of which ones already failed during this batch.

// This gets reset before we yield back to the browser.

// TODO: Warn in strict mode if getDerivedStateFromError is

// not defined.

// Attach a listener to the promise to "ping" the root and retry. But

// only if one does not already exist for the current render expiration

// time (which acts like a "thread ID" here).

// Memoize using the thread ID to prevent redundant listeners.

// A promise that previously suspended React from committing has resolved.

// If React is still suspended, try again at the previous level (pingTime).

// The thenable resolved, so we no longer need to memoize, because it will

// never be thrown again.

// Received a ping at the same priority level at which we're currently

// rendering. Restart from the root.

// Confirm that the root is still suspended at this level. Otherwise exit.

// Ping at the original level

// TODO: When we add back resuming, we need to ensure the progressed work

// is thrown out and not reused during the restarted render. One way to

// invalidate the progressed work is to restart at expirationTime + 1.

// The source fiber did not complete.

// Its effect list is no longer valid.

// This is a thenable.

// Find the earliest timeout threshold of all the placeholders in the

// ancestor path. We could avoid this traversal by storing the thresholds on

// the stack, but we choose not to because we only hit this path if we're

// IO-bound (i.e. if something suspends). Whereas the stack is used even in

// the non-IO- bound case.

// Do not search any further.

// If there is a DehydratedSuspenseComponent we don't have to do anything because

// if something suspends inside it, we will simply leave that as dehydrated. It

// will never timeout.

// Schedule the nearest Suspense to re-render the timed out view.

// In order to capture, the Suspense component must have a fallback prop.

// Found the nearest boundary.

// Stash the promise on the boundary fiber. If the boundary times out, we'll

// If the boundary is outside of concurrent mode, we should *not*

// suspend the commit. Pretend as if the suspended component rendered

// null and keep rendering. In the commit phase, we'll schedule a

// subsequent synchronous update to re-render the Suspense.

// Note: It doesn't matter whether the component that suspended was

// inside a concurrent mode tree. If the Suspense is outside of it, we

// should *not* suspend the commit.

// We're going to commit this fiber even though it didn't complete.

// But we shouldn't call any lifecycle methods or callbacks. Remove

// all lifecycle effect tags.

// This is a new mount. Change the tag so it's not mistaken for a

// completed class component. For example, we should not call

// componentWillUnmount if it is deleted.

// When we try rendering again, we should not reuse the current fiber,

// since it's known to be in an inconsistent state. Use a force updte to

// prevent a bail out.

// The source fiber did not complete. Mark it with Sync priority to

// indicate that it still has pending work.

// Exit without suspending.

// Confirmed that the boundary is in a concurrent mode tree. Continue

// with the normal suspend path.

// If no explicit threshold is given, default to an arbitrarily large

// value. The actual size doesn't matter because the threshold for the

// whole tree will be clamped to the expiration time.

// Mark the earliest timeout in the suspended fiber's ancestor path.

// After completing the root, we'll take the largest of all the

// suspended fiber's timeouts and use it to compute a timeout for the

// whole tree.

// This boundary already captured during this render. Continue to the next

// boundary.

// Since we already have a current fiber, we can eagerly add a retry listener.

// No boundary was found. Fallthrough to error mode.

// TODO: Use invariant so the message is stripped in prod?

// We didn't find a boundary that could handle this type of exception. Start

// over and traverse parent path again, this time treating the exception

// as an error.

// This module is forked in different environments.

// By default, return `true` to log errors to the console.

// Forks can return `false` if this isn't desirable.

// Capture and retry

// TODO: popHydrationState

// Captured a suspense effect. Re-render the boundary.

// We show the whole stack but dedupe on the top component's name because

// the problematic code almost always lies inside that component.

// The following switch statement is only concerned about placement,

// updates, and deletions. To avoid needing to add a case for every

// possible bitmap value, we remove the secondary effects from the

// effect tag and switch on that value.

// Clear the "placement" from effect tag so that we know that this is inserted, before

// any life-cycles like componentDidMount gets called.

// TODO: findDOMNode doesn't rely on this any more but isMounted

// does and isMounted is deprecated anyway so we should be able

// to kill this.

// Placement

// Recursively delete all host nodes from the parent.

// Detach refs and call componentWillUnmount() on the whole subtree.

// Cut off the return pointers to disconnect it from the tree. Ideally, we

// should clear the child pointer of the parent alternate to let this

// get GC:ed but we don't know which for sure which parent is the current

// one so we'll settle for GC:ing the subtree of this child. This child

// itself will be GC:ed when the parent updates the next time.

// We call the scheduled callback instead of commitPassiveEffects directly

// to ensure tracing works correctly.

// Update the pending priority levels to account for the work that we are

// about to commit. This needs to happen before calling the lifecycles, since

// they may schedule additional updates.

// Fast path. There's no remaining work. Clear everything.

// Let's see if the previous latest known pending level was just flushed.

// We've flushed all the known pending levels.

// We've flushed the earliest known pending level. Set this to the

// latest pending time.

// Now let's handle the earliest remaining level in the whole tree. We need to

// decide whether to treat it as a pending level or as suspended. Check

// it falls within the range of known suspended levels.

// There's no suspended work. Treat the earliest remaining level as a

// pending level.

// The earliest remaining level is later than all the suspended work. That

// means we've flushed all the suspended work.

// The earliest remaining time is earlier than all the suspended work.

// Treat it as a pending update.

// Restore any pending interactions at this point,

// So that cascading work triggered during the render phase will be accounted for.

// Reset this to null before calling lifecycles

// A fiber's effect list consists only of its children, not itself. So if

// the root has an effect, we need to add it to the end of the list. The

// resulting list is the set that would belong to the root's parent, if

// it had one; that is, all the effects in the tree including the root.

// Invoke instances of getSnapshotBeforeUpdate before mutation.

// Clean-up

// Commit all the side-effects within a tree. We'll do this in two passes.

// The first pass performs all the host insertions, updates, deletions and

// ref unmounts.

// The work-in-progress tree is now the current tree. This must come after

// the first pass of the commit phase, so that the previous tree is still

// current during componentWillUnmount, but before the second pass, so that

// the finished work is current during componentDidMount/Update.

// In the second pass we'll perform all life-cycles and ref callbacks.

// Life-cycles happen as a separate pass so that all placements, updates,

// and deletions in the entire tree have already been invoked.

// This pass also triggers any renderer-specific initial effects.

// This commit included a passive effect. These do not need to fire until

// after the next paint. Schedule an callback to fire them in an async

// event. To ensure serial execution, the callback will be flushed early if

// we enter rootWithPendingPassiveEffects commit phase before then.

// Set this to true to prevent re-entrancy

// Check if work was scheduled by one of the effects

// Flush any sync work that was scheduled by effects

// TODO: Avoid this extra callback by mutating the tracing ref directly,

// like we do at the beginning of commitRoot. I've opted not to do that

// here because that code is still in flux.

// If there's no remaining work, we can clear the set of already failed

// error boundaries.

// It's not safe for commitRoot() to throw.

// Store the error for now and we'll re-throw in finishRendering().

// Clear completed interactions from the pending Map.

// Unless the render was suspended or cascading work was scheduled,

// In which case– leave pending interactions until the subsequent render.

// Only decrement the pending interaction count if we're done.

// If there's still work at the current priority,

// That indicates that we are waiting for suspense data.

// Bubble up the earliest expiration time.

// We're in profiling mode.

// Let's use this same traversal to update the render durations.

// Attempt to complete the current unit of work, then move to the

// next sibling. If there are no more siblings, return to the

// parent fiber.

// The current, flushed, state of this fiber is the alternate.

// Ideally nothing should rely on this, but relying on it here

// means that we don't need an additional field on the work in

// progress.

// Record the render duration for the fiber that errored.

// Include the time spent working on failed children before continuing.

// This fiber did not complete because something threw. Pop values off

// the stack without entering the complete phase. If this is a boundary,

// capture values if possible.

// Because this fiber did not complete, don't reset its expiration time.

// Restarting an error boundary

// If completing this work spawned new work, do that next. We'll come

// back here again.

// Since we're restarting, remove anything that is not a host effect

// from the effect tag.

// Mark the parent fiber as incomplete and clear its effect list.

// If there is more work to do in this returnFiber, do that next.

// If there's no more work in this returnFiber. Complete the returnFiber.

// Don't replay if it fails during completion phase.

// This fiber completed.

// Remember we're completing this unit so we can find a boundary if it fails.

// Update render duration assuming we didn't error.

// We're out of completion phase so replaying is fine now.

// Completing this fiber spawned new work. Work on that next.

// Do not append effects to parents if a sibling failed to complete

// Append all the effects of the subtree and this fiber onto the effect

// list of the parent. The completion order of the children affects the

// side-effect order.

// If this fiber had side-effects, we append it AFTER the children's

// side-effects. We can perform certain side-effects earlier if

// needed, by doing multiple passes over the effect list. We don't want

// to schedule our own side-effect on our own list because if end up

// reusing children we'll schedule this effect onto itself since we're

// at the end.

// Skip both NoWork and PerformedWork tags when creating the effect list.

// PerformedWork effect is read by React DevTools but shouldn't be committed.

// We've reached the root.

// Without this explicit null return Flow complains of invalid return type

// TODO Remove the above while(true) loop

// See if beginning this work spawns more work.

// Record the render duration assuming we didn't bailout (or error).

// Currently replaying a failed unit of work. This should be unreachable,

// because the render phase is meant to be idempotent, and it should

// have thrown again. Since it didn't, rethrow the original error, so

// React's internal stack is not misaligned.

// If this doesn't spawn new work, complete the current work.

// Flush asynchronous work until there's a higher priority event

// Flush work without yielding

// Check if we're starting from a fresh stack, or if we're resuming from

// previously yielded work.

// Reset the stack and start working from the root.

// Determine which interactions this batch of work currently includes,

// So that we can accurately attribute time spent working on it,

// Store the current set of interactions on the FiberRoot for a few reasons:

// We can re-use it in hot functions like renderRoot() without having to recalculate it.

// We will also use it in commitWork() to pass to any Profiler onRender() hooks.

// This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

// Work thrown by an interaction tracing subscriber should be rethrown,

// But only once it's safe (to avoid leaving the scheduler in an invalid state).

// We're about to start new traced work.

// Restore pending interactions so cascading work triggered during the render phase will be accounted for.

// This is top level call.

// Any other measurements are performed within.

// Resume any measurements that were in progress during the last loop.

// Reset in case completion throws.

// This is only used in DEV and when replaying is on.

// This is a fatal error.

// Record the time spent rendering before an error was thrown.

// This avoids inaccurate Profiler durations in the case of a suspended render.

// Reset global debug state

// We assume this is defined in DEV

// TODO: we already know this isn't true in some cases.

// At least this shows a nicer error message until we figure out the cause.

// https://github.com/facebook/react/issues/12449#issuecomment-386727431

// This is the root. The root could capture its own errors. However,

// we don't know if it errors before or after we pushed the host

// context. This information is needed to avoid a stack mismatch.

// Because we're not sure, treat this as a fatal error. We could track

// which phase it fails in, but doesn't seem worth it. At least

// for now.

// Yield back to main thread.

// Traced work is done for now; restore the previous interactions.

// We're done performing work. Time to clean up.

// `nextRoot` points to the in-progress root. A non-null value indicates

// that we're in the middle of an async render. Set it to null to indicate

// there's no more work to be done in the current batch.

// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and

// onYield is called upon exiting. We use these in lieu of returning a tuple.

// I've also chosen not to inline them into renderRoot because these will

// eventually be lifted into the renderer.

// We completed the whole tree.

// There was an error

// There's lower priority work. If so, it may have the effect of fixing

// the exception that was just thrown. Exit without committing. This is

// similar to a suspend, but without a timeout because we're not waiting

// for a promise to resolve. React will restart at the lower

// priority level.

// There's no lower priority work, but we're rendering asynchronously.

// Synchronously attempt to render the same level one more time. This is

// for a promise to resolve.

// The tree was suspended.

// Find the earliest uncommitted expiration time in the tree, including

// work that is suspended. The timeout threshold cannot be longer than

// the overall expiration.

// Subtract the current time from the absolute timeout to get the number

// of milliseconds until the timeout. In other words, convert an absolute

// timestamp to a relative time. This is the value that is passed

// to `setTimeout`.

// Ready to commit.

// Error was thrown at the root. There is no parent, so the root

// itself should capture it.

// Interaction threads are unique per root and expiration time.

// Creates a unique async expiration time.

// Outside of concurrent mode, updates are always synchronous.

// During render phase, updates expire during as the current render.

// This is a normal, concurrent update

// If we're in the middle of rendering a tree, do not update at the same

// expiration time that is already rendering.

// Keep track of the lowest pending interactive expiration time. This

// allows us to synchronously flush all interactive updates

// when needed.

// TODO: Move this to renderer?

// Schedule the timeout.

// The boundary fiber (a Suspense component) previously timed out and was

// rendered in its fallback state. One of the promises that suspended it has

// resolved, which means at least part of the tree was likely unblocked. Try

// Update the source fiber's expiration time

// Walk the parent path to the root and update the child expiration time.

// Update the pending async work count for previously unscheduled interaction.

// This is an interruption. (Used for performance tracking.)

// If we're in the render phase, we don't need to schedule this root

// for an update, because we'll do it before we exit...

// ...unless this is a different root than the one we're rendering.

// Reset this back to zero so subsequent updates don't throw.

// TODO: Everything below this is written as if it has been lifted to the

// renderers. I'll do this in a follow-up.

// Linked-list of roots

// Restore the original state of the work-in-progress

// Replay the begin phase.

// Reading the expando property is intentionally

// inside `try` because it might be a getter or Proxy.

// Also suppress logging for the original error.

// If the begin phase did not fail the second time, set this pointer

// back to the original value.

// This should never happen. Don't throw because this code is DEV-only.

// A callback is already scheduled. Check its expiration time (timeout).

// Existing callback has sufficient timeout. Exit.

// The request callback timer is already running. Don't start a new one.

// Existing callback has insufficient timeout. Cancel and schedule a

// new one.

// Wait `msUntilTimeout` milliseconds before committing.

// The root timed out. Commit it.

// Read the current time before entering the commit phase. We can be

// certain this won't cause tearing related to batching of event updates

// because we're at the top of a timer event.

// Don't wait an additional tick. Commit the tree immediately.

// requestCurrentTime is called by the scheduler to compute an expiration

// time.

// Expiration times are computed by adding to the current time (the start

// time). However, if two updates are scheduled within the same event, we

// should treat their start times as simultaneous, even if the actual clock

// time has advanced between the first and second call.

// In other words, because expiration times determine how updates are batched,

// we want all updates of like priority that occur within the same event to

// receive the same expiration time. Otherwise we get tearing.

// We keep track of two separate times: the current "renderer" time and the

// current "scheduler" time. The renderer time can be updated whenever; it

// only exists to minimize the calls performance.now.

// But the scheduler time can only be updated if there's no pending work, or

// if we know for certain that we're not in the middle of an event.

// Check if there's pending work.

// If there's no pending work, or if the pending work is offscreen, we can

// read the current time without risk of tearing.

// requestWork is called by the scheduler whenever a root receives an update.

// It's up to the renderer to call renderRoot at some point in the future.

// Add the root to the schedule.

// Check if this root is already part of the schedule.

// This root is not already scheduled. Add it.

// Update the priority.

// Flush work at the end of the batch.

// ...unless we're inside unbatchedUpdates, in which case we should

// flush it now.

// TODO: Get rid of Sync and use current time?

// This root no longer has work. Remove it from the scheduler.

// TODO: This check is redudant, but Flow is confused by the branch

// below where we set lastScheduledRoot to null, even though we break

// from the loop right after.

// This is the only root in the list.

// This is the first root in the list.

// This is the last root in the list.

// Update the priority, if it's higher

// Sync is highest priority by definition so

// we can stop searching.

// TODO: This wrapper exists because many of the older tests (the ones that use

// flushDeferredPri) rely on the number of times `shouldYield` is called. We

// should get rid of it.

// The root has expired. Flush all work up to the current time.

// The root schedule is circular, so this is never null.

// Keep working on roots until there's no more work, or until there's a higher

// priority event.

// We're done flushing work. Either we ran out of time in this callback,

// or there's no more work left with sufficient priority.

// If we're inside a callback, set this to false since we just completed it.

// If there's work left over, schedule a new callback.

// Clean-up.

// Perform work on root as if the given expiration time is the current time.

// This has the effect of synchronously flushing all work up to and

// including the given time.

// Flush any sync work that was scheduled by lifecycles

// Check if this is async work or sync/expired work.

// Flush async work.

// This root is already complete. We can commit it.

// If this root previously suspended, clear its existing timeout, since

// we're about to try rendering again.

// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

// We've completed the root. Check the if we should yield one more time

// before committing.

// There's no time left. Mark this root as complete. We'll come

// back and commit it later.

// Still time left. Commit the root.

// Flush work without yielding.

// TODO: Non-yieldy work does not necessarily imply expired work. A renderer

// may want to perform some work without yielding, but also without

// requiring the root to complete (by triggering placeholders).

// We've completed the root. Commit it.

// Check if there's a batch that matches this expiration time.

// This root is blocked from committing by a batch. Unschedule it until

// we receive another update.

// Commit the root.

// Check if this is a nested update (a sync update scheduled during the

// commit phase).

// If the next root is the same as the previous root, this is a nested

// update. To prevent an infinite loop, increment the nested update count.

// Reset whenever we switch roots.

// Unschedule this root so we don't work on it again until there's

// another update.

// TODO: Batching should be implemented at the renderer level, not inside

// the reconciler.

// TODO: Batching should be implemented at the renderer level, not within

// If there are any pending interactive updates, synchronously flush them.

// This needs to happen before we read any handlers, because the effect of

// the previous event may influence which handlers are called during

// this event.

// Synchronously flush pending interactive updates.

// 0 is PROD, 1 is DEV.

// Might add PROFILE later.

// Currently this is only used with renderSubtreeIntoContainer; not sure if it

// makes sense elsewhere

// TODO: If this is a nested container, this won't be the root.

// $FlowFixMe number or string is fine here

// Support DevTools props for function components, forwardRef, memo, host components, etc.

// TODO: this is special because it gets imported during build.

// TODO: This type is shared between the reconciler and ReactDOM, but will

// eventually be lifted out to the renderer.

// Since we assume the current time monotonically increases, we only hit

// this branch when computeUniqueAsyncExpiration is fired multiple times

// within a 200ms window (or whatever the async bucket size is).

// TODO: Avoid need to bind by replacing callbacks in the update queue with

// list of Work objects.

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */

// $FlowIssue Flow incorrectly thinks Map has no prototype

// $FlowIssue Flow incorrectly thinks Set has no prototype

// DOM component is still mounted; update

// This batch is empty. Return.

// Ensure this is the first batch in the list.

// This batch is not the earliest batch. We need to move it to the front.

// Update its expiration time to be the expiration time of the earliest

// batch, so that we can flush it without flushing the other batches.

// Rendering this batch again ensures its children will be the final state

// when we flush (updates are processed in insertion order: last

// update wins).

// TODO: This forces a restart. Should we print a warning?

// Remove the batch from the list.

// Add it to the front.

// Synchronously flush all the work up to this batch's expiration time.

// Pop the batch from the list.

// Append the next earliest batch's children to the update queue.

// TODO: Error handling.

// Insert sorted by expiration time then insertion order

// First clear any existing content.

// TODO: Without `any` type, Flow says "Property cannot be accessed on any

// member of intersection type." Whyyyyyy.

// Initial mount

// Initial mount should not be batched.

// TODO: pass ReactDOM portal implementation as third argument

// This file intentionally does *not* have the Flow annotation.

// Don't add it. See `./inline-typed.js` for an explanation.

// TODO: figure out the API for cross-renderer implementation.

// This tag allow us to uniquely identify this as a React Portal

// TODO: throw or warn if we couldn't hydrate?

// If you call unmountComponentAtNode twice in quick succession, you'll

// get `true` twice. That's probably fine?

// Unmount should not be batched.

// Temporary alias since we already shipped React 16 RC with it.

// TODO: remove in React 17.

// Keep in sync with ReactDOMUnstableNativeDependencies.js

// and ReactTestUtils.js. This is an array for better minification.

// No DevTools

// This isn't a real property on the hook, but it can be set to opt out

// of DevTools integration and associated warnings and logs.

// https://github.com/facebook/react/issues/3877

// DevTools exists, even though it doesn't support Fiber.

// We have successfully injected, so now it is safe to set up hooks.

// DevTools exists

// Don't warn in exotic cases like chrome-extension://.

/* global window */

/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * This is the abstract API for an update queue.
 */

/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */

/**
 * Base class helpers for the updating state of a component.
 */

// If a component has string refs, we will assign a different object later.

// We initialize the default updater but the real one gets injected by the

// renderer.

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */

/**
 * Convenience component with default shallow equality check for sCU.
 */

// Avoid an extra prototype jump for these methods.

/**
 * Keeps track of the current dispatcher.
 */

/**
   * @internal
   * @type {ReactComponent}
   */

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */

// Stack implementation injected by the current renderer.

// Add an extra top frame while an element is being validated

// Delegate to the injected renderer-specific implementation

// Used by renderers to avoid bundling object-assign twice in UMD bundles:

// These should not be included in production.

// Shim for React DOM 16.0.0 which still destructured (but not used) this.

// TODO: remove in React 17.0.

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */

// This tag allows us to uniquely identify this as a React Element

// Built-in properties that belong on the element

// Record the component responsible for creating this element.

// The validation flag is currently mutative. We put it on

// an external backing store so that we can freeze the whole object.

// This can be replaced with a WeakMap once they are implemented in

// commonly used development environments.

// To make comparing ReactElements easier for testing purposes, we make

// the validation flag non-enumerable (where possible, which should

// include every environment we run tests in), so the test framework

// ignores it.

// self and source are DEV only properties.

// Two elements created in two different places should be considered

// equal for testing purposes and therefore we hide it from enumeration.

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

// Reserved names are extracted

// Remaining properties are added to a new props object

// Children can be more than one argument, and those are transferred onto

// the newly allocated props object.

// Resolve default props

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */

// All of the above are perceived as null.

// If it's the only child, treat the name as if it was wrapped in an array

// so that it's consistent if the number of children grows.

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */

// Do some typechecking here since we call this blindly. We want to ensure

// that we don't block potential future ES APIs.

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

// Implicit key determined by the index in the set

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

// Keep both the (mapped) and old keys if they differ, just as

// traverseAllChildren used to do for objects as children

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */

// Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */

// Usually the current owner is the offender, but if it accepts children as a

// property, it may be the creator of the child that's responsible for

// assigning it a key.

// Give the component that originally created this child.

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */

// This element was passed in a valid location.

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */

// Note: Memo only checks outer props here.

// Inner props are checked in the reconciler.

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */

// We warn in this case but don't throw. We expect the element creation to

// succeed and there will likely be errors in render.

// The result can be nullish if a mock or a custom function is used.

// TODO: Drop this when these are no longer allowed as the type argument.

// Skip key warning if the type isn't valid since our key validation logic

// doesn't expect a non-string/function type and can throw confusing errors.

// We don't want exception behavior to differ between dev and prod.

// (Rendering will throw with a helpful message and as soon as the type is

// fixed, the key warnings will appear.)

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */

// an immutable object with a single mutable value

// As a workaround to support multiple concurrent renderers, we categorize

// some renderers as primary and others as secondary. We only expect

// there to be two concurrent renderers at most: React Native (primary) and

// Fabric (secondary); React DOM (primary) and React ART (secondary).

// Secondary renderers store their context values on separate fields.

// Used to track how many concurrent renderers this context currently

// supports within in a single renderer. Such as parallel server rendering.

// These are circular

// $FlowFixMe: Flow complains about not setting a value, which is intentional here

// $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

// Do not warn for 0 arguments because it could be due to usage of the 'arguments' object

// React uses these fields to store the result.

// Match production behavior more closely:

// TODO: add a more generic warning for invalid values.

// Don't deduplicate because this legitimately causes bugs

// and nobody should be using this in existing code.

// Original props are copied

// Silently steal the ref from the parent.

// Remaining properties override existing props

/**
 * This reducer will update the state with the most recent location history
 * has transitioned to. This may not be in sync with the router, particularly
 * if you have asynchronously-loaded routes, so reading from and relying on
 * this state is discouraged.
 */

/**
 * This action type will be dispatched when your history
 * receives a location change.
 */

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

/*!
  * Bootstrap modal.js v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

//# sourceMappingURL=modal.js.map

// @flow

/*!
  * Bootstrap dropdown.js v4.3.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */

//# sourceMappingURL=dropdown.js.map

// extracted by mini-css-extract-plugin

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */

// Prop type validation may throw. In case they do, we don't want to

// fail the render phase where it didn't fail before. So we log it.

// After these have been cleaned up, we'll let them throw.

// This is intentionally an invariant that gets caught. It's the same

// behavior as without this statement except with a better message.

// Only monitor this failure once because there tends to be a lot of the

// same error.

/**
 * Resets warning cache when testing.
 *
 * @private
 */

/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol

// nor polyfill, then a plain number is used for performance.

// AsyncMode is deprecated along with isAsyncMode

// AsyncMode should be deprecated

/**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

// Returns class name of the object, if any.

// We need to check all keys in case some are required but missing from

// props.

// Important!

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

/**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

/*eslint-disable no-self-compare*/

// SameValue algorithm

/*eslint-enable no-self-compare*/

/**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */

// Make `instanceof Error` still work for returned errors.

// New behavior only for users of `prop-types` package

// Old behavior for people using React.PropTypes

// Avoid spamming the console because they are often not actionable except for lib authors

// Before Symbol spec.

/**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

// Iterator will provide entry [k,v] tuples rather than values.

// Equivalent of `typeof` but with special handling for array and regexp.

// Native Symbol.

// falsy value can't be a Symbol

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// This handles more types than `getPropType`. Only used for error messages.

// See `createPrimitiveTypeChecker`.

// Returns a string that is postfixed to a warning about an invalid type.

// For example, "undefined" or "of type array"

// HTTP basic authentication

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Prepare the response

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add headers to the request

// Add responseType to request if needed

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

// EXTERNAL MODULE: ./node_modules/react/index.js

// [::1] is the IPv6 localhost address.

// 127.0.0.1/8 is considered localhost for IPv4.

// EXTERNAL MODULE: ./node_modules/bootstrap/dist/js/bootstrap.js

// EXTERNAL MODULE: ./node_modules/bootstrap/js/dist/util.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// Default to a dummy "batch" implementation that just runs the callback

// Allow injecting another batching function later

// the current/next pattern is copied from redux's createStore code.

// TODO: refactor+expose that code to be reusable here?

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// React currently throws a warning when using useLayoutEffect on the server.

// To get around it, we can conditionally useEffect on the server (no-op) and

// useLayoutEffect in the browser. We need useLayoutEffect because we want

// `connect` to perform sync updates to a ref to save the latest props after

// a render is actually committed to the DOM.

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

// options object:

// If we aren't running in "pure" mode, we don't want to memoize values.

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// that just executes the given callback immediately.

// Distinguish between actual "data" props that were passed to the wrapper component,

// and values needed to control behavior (forwarded refs, alternate context instances).

// To maintain the wrapperProps object reference, memoize this destructuring.

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Memoize the check that determines which context instance we should use.

// The child props selector needs the store reference as an input.

// Re-create this selector whenever the store changes.

// This Subscription's source should match where store came from: props vs. context. A component

// connected to the store via props shouldn't use subscription from context, or vice versa.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// the middle of the notification loop, where `subscription` will then be null. This can

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// that have been unsubscribed in the  middle of the notification loop.

// Otherwise, put this component's subscription instance into context, so that

// connected descendants won't update until after this component is done

// Propagate any mapState/mapDispatch errors upwards

// Set up refs to coordinate values between the subscription effect and the render logic

// Tricky logic here:

// - This render may have been triggered by a Redux store update that produced new child props

// - However, we may have gotten new wrapper props after that

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// TODO We're reading the store directly in render() here. Bad idea?

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// to determine what the child props should be.

// We need this to execute synchronously every time we re-render. However, React warns

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// just useEffect instead to avoid the warning, since neither will run anyway.

// We want to capture the wrapper props and child props we used for later comparisons

// If the render was from a store update, clear out that reference and cascade the subscriber update

// Our re-subscribe logic only runs when the store/subscription setup changes

// If we're not subscribed to the store, nothing to do here

// Capture values for checking if and when this component unmounts

// Actually run the selector with the most recent store state and wrapper props

// to determine what the child props should be

// If the child props haven't changed, nothing to do here - cascade the subscription update

// Save references to the new child props.  Note that we track the "child props from store update"

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// forcing another re-render, which we don't want.

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// Actually subscribe to the nearest connected ancestor (or store)

// Pull data from the store after first render in case the store has

// changed since we began.

// It's possible that we caught an error due to a bad mapState function, but the

// parent re-rendered without this component and we're about to unmount.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// if we ever do those wrong, this throw will surface the error in our tests.

// In that case, throw the error from here so it doesn't get lost.

// Now that all that's done, we can finally try to actually render the child component.

// We memoize the elements for the rendered child component as an optimization.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/isPlainObject.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/warning.js

/* eslint-disable no-empty */

/* eslint-enable no-empty */

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/verifyPlainObject.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// whether mapToProps needs to be invoked when props have changed.

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// therefore not reporting its length accurately..

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// this function wraps mapToProps in a proxy function which does several things:

//  * Detects whether the mapToProps function being called depends on props, which

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//  * On first call, handles mapToProps if returns another function, and treats that

//    new function as the true mapToProps for subsequent calls.

//  * On first call, verifies the first result is a plain object, in order to warn

//    the developer that their mapToProps function is not returning a valid result.

// allow detectFactoryAndVerify to get ownProps

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// props have not changed. If false, the selector will always return a new

// object and shouldComponentUpdate will always return true.

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

// createConnect with default args builds the 'official' connect behavior. Calling it with

// different options opens up some testing and extensibility scenarios

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// passed through to selectorFactory

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// subscription callback always has the selector from the latest render commit

// available, otherwise a store update may happen between render and the effect,

// which may cause missed updates; we also must ensure the store subscription

// is created synchronously, otherwise a store update may occur before the

// subscription is created and an inconsistent state may be observed

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js

/* eslint-disable import/no-unresolved */

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// EXTERNAL MODULE: ./node_modules/axios/index.js

// CONCATENATED MODULE: ./node_modules/mini-create-react-context/dist/esm/index.js

// CONCATENATED MODULE: ./node_modules/resolve-pathname/index.js

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

// CONCATENATED MODULE: ./node_modules/value-equal/index.js

// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

// eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

// IE 11 sometimes throws when accessing window.history.state

// See https://github.com/ReactTraining/history/pull/289

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

// Ignore extraneous popstate events in WebKit.

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

// TODO: We could probably make this more reliable by

// keeping a list of keys we've seen in sessionStorage.

// Instead, we just default to 0 for keys we don't know.

// Public interface

// We can't use window.location.hash here because it's not

// consistent across browsers - Firefox will pre-decode it!

// Ensure we always have a properly-encoded hash.

// A hashchange doesn't always == location change.

// Ignore this change; we already setState in push/replace.

// keeping a list of paths we've seen in sessionStorage.

// Instead, we just default to 0 for paths we don't know.

// Ensure the hash is encoded properly before doing anything else.

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// rather setState here and ignore the hashchange. The caveat here

// is that other hash histories in the page will consider it a POP.

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

/**
 * Creates a history object that stores locations in memory.
 */

// EXTERNAL MODULE: ./node_modules/react-router/node_modules/path-to-regexp/index.js

// This is a bit of a hack. We have to start listening for location

// changes here in the constructor in case there are any <Redirect>s

// on the initial render. If there are, they will replace/push when

// they mount and since cDM fires in children before parents, we may

// get a new location before the <Router> is mounted.

/**
 * The public API for a <Router> that stores location in memory.
 */

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * Public API for matching a URL pathname to a path.
 */

// the path used to match

// the matched portion of the URL

// whether or not we matched exactly

/**
 * The public API for matching a single path and rendering.
 */

// Preact uses an empty array as children by

// default, so use null if that's the case.

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

// We use React.Children.forEach instead of React.Children.toArray().find()

// here because toArray adds keys to all child elements and we do not want

// to trigger an unmount/remount for two <Route>s that render the same

// component at different URLs.

// TODO: Add link to article that explains in detail how to avoid

// loading 2 different builds.

// CONCATENATED MODULE: ./node_modules/react-router-dom/esm/react-router-dom.js

/**
 * The public API for a <Router> that uses HTML5 history.
 */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

/**
 * The public API for rendering a history-aware <a>.
 */

// onClick prevented default

// ignore everything but left clicks

// eslint-disable-line no-unused-vars

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

// CONCATENATED MODULE: ./src/react-component/weather.js

// CONCATENATED MODULE: ./src/reducers/ReduceListCity.js

// CONCATENATED MODULE: ./src/reducers/concatReduce.js

// return[...element,action.list];

// EXTERNAL MODULE: ./node_modules/redux-devtools-extension/index.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./src/getElement/getOneCity.js

// ignore write errors

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript
